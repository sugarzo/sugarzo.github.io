<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试Unity文章</title>
    <link href="/2022/09/23/%5BUnity%5D%20%E7%8A%B6%E6%80%81%E6%9C%BA%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6%20(%E4%BA%8C)%20%E8%AE%BE%E8%AE%A1%E6%B8%B8%E6%88%8F%E7%8A%B6%E6%80%81%E7%9A%84%E4%BF%9D%E5%AD%98%E6%A1%86%E6%9E%B6%EF%BC%8C%E5%AD%98%E6%A1%A3%E5%8A%9F%E8%83%BD%20ScriptableObject%E3%80%81EasySave/"/>
    <url>/2022/09/23/%5BUnity%5D%20%E7%8A%B6%E6%80%81%E6%9C%BA%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6%20(%E4%BA%8C)%20%E8%AE%BE%E8%AE%A1%E6%B8%B8%E6%88%8F%E7%8A%B6%E6%80%81%E7%9A%84%E4%BF%9D%E5%AD%98%E6%A1%86%E6%9E%B6%EF%BC%8C%E5%AD%98%E6%A1%A3%E5%8A%9F%E8%83%BD%20ScriptableObject%E3%80%81EasySave/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_51776409/article/details/124854564" title="前文 ： ​​​​​​​​​​​​​​[Unity] 状态机事件流程框架 (一)">前文 ： ​​​​​​​[Unity] 状态机事件流程框架 (一)</a></p><p>本期来设计一个游戏状态的怎么在游戏中表示和存储。保存游戏状态的目的一是方便根据玩家当前的游戏进度实行各种各样的逻辑分支，二是在存档时能记录实时的游戏数据，方便读档回到存档位置。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>实现的效果图如下（图为作者参与过项目展示，图一的例子为游戏流程-序章剧情中某一处需要触发摄像机引导的Trigger配置，图二为在框架中自定义游戏状态表示，并可以使用一个Trigger去访问它。其中编辑器窗体由Odin制作，不在本期讨论范围）</p><p><img src="https://img-blog.csdnimg.cn/7ce6efe3972347bb8e99188ff848d372.png"></p><p><img src="https://img-blog.csdnimg.cn/17de83d7fe874e29b7f375823b1b9436.png"></p><p>最后所有的状态都能被写入磁盘（EasySave实现）</p><p> <img src="https://img-blog.csdnimg.cn/5b217bc8d0c74717bb8ae7c456effa5b.png"></p><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="如何在游戏中存储状态："><a href="#如何在游戏中存储状态：" class="headerlink" title="如何在游戏中存储状态："></a>如何在游戏中存储状态：</h2><p>一般来说，我们会使用unity中ScriptableObject来表示游戏中一些数据，方便我们在游戏编辑器下的编辑，但使用ScriptableObject时需要搞清楚几个概念。首先分享一个在M_Studio中背包系统视频下的一条评论：</p><p><img src="https://img-blog.csdnimg.cn/216cf9eea6ca4fb9b8fb05000e808cf0.png"></p><p>总结就是：游戏中的数据分为<strong>持久化数据</strong>和<strong>非持久化数据</strong>。比如一个物品可能由A、B、C三种状态，这里的<strong>物品</strong>和<strong>状态列表</strong>就可以使用一个ScriptableObject进行存储（即非持久化数据，使用List可进行存储）。当游戏开始运行时，某一刻该物品的状态是B，此时我们要读取状态做判断或者存档操作时，我们不需要知道该物品是否有其他状态（A、C），只需要知道【物品状态-&gt;B】的关系就可以了。这个就是需要持久化数据，这种一一对应的关系比较适合用字典方式来实现它。</p><p>因此，我们将游戏状态需要的数据分离成可持久化和非持久化，并需要将它们表示在不同的脚本位置。</p><p>非持久化数据：状态名（String），拥有的状态列表（List<String>），应放在ScriptableObject中</p><p>持久化数据：状态名，当前状态（Dictionary&lt;string,string&gt;），应放在MonoBehaviour脚本上。该脚本一般是拥有单例模式的管理类。</p><p>我们先表示以下怎么使用状态的ScriptableObject表示。这里的ValueDropID和ValueDropValue方法主要提供给是在Trigger使用下拉菜单。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusCheck</span>&lt;<span class="hljs-title">TKey</span>,<span class="hljs-title">TValue</span>&gt;<br>&#123;<br>    <span class="hljs-function">List&lt;TKey&gt; <span class="hljs-title">SelectID</span>()</span>;<br>    <span class="hljs-function">List&lt;TValue&gt; <span class="hljs-title">SelectValue</span>(<span class="hljs-params">TKey ID</span>)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusData</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        key = <span class="hljs-keyword">this</span>.GetType().ToString() + <span class="hljs-string">&quot;-&quot;</span> + name;<br>    &#125;<br>    [<span class="hljs-meta">Header(<span class="hljs-string">&quot;请保证key值唯一&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> key;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> id</span>)</span>;<br>&#125;<br><br><span class="hljs-comment">//实现范式版本</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusData</span>&lt;<span class="hljs-title">TKey</span>, <span class="hljs-title">TValue</span>&gt; : <span class="hljs-title">StatusData</span>, <span class="hljs-title">IStatusCheck</span>&lt;<span class="hljs-title">TKey</span>, <span class="hljs-title">TValue</span>&gt;<br>&#123;<br>    [<span class="hljs-meta">Header(<span class="hljs-string">&quot;备注&quot;</span>),TextArea</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> content;<br><br>    [<span class="hljs-meta">Space</span>]<br>    <span class="hljs-keyword">public</span> List&lt;Data&gt; datas;<br><br>    [<span class="hljs-meta">Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Data</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> TKey ID;<br>        <span class="hljs-keyword">public</span> List&lt;TValue&gt; Values;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>    &#123;<br>        List&lt;<span class="hljs-built_in">string</span>&gt; retList = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> id <span class="hljs-keyword">in</span> datas)<br>        &#123;<br>            retList.Add(id.ID.ToString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> retList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> id</span>)</span><br>    &#123;<br>        List&lt;<span class="hljs-built_in">string</span>&gt; retList = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br><br>        <span class="hljs-keyword">var</span> selectData = datas.Find(x =&gt; x.ID.ToString() == id.ToString());<br>        <span class="hljs-keyword">if</span> (selectData != <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> str <span class="hljs-keyword">in</span> selectData.Values)<br>                retList.Add(str.ToString());<br>        &#125;<br>            <br><br>        <span class="hljs-keyword">return</span> retList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里具体实现游戏状态，使用 StatusData&lt;string, string&gt;进行派生就好啦。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[CreateAssetMenu(menuName = &quot;新建状态/游戏状态&quot;)]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">GameStatusData</span> : <span class="hljs-symbol">StatusData</span>&lt;<span class="hljs-symbol">string, <span class="hljs-symbol">string</span></span>&gt;<br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们设置对应的Trigger，使用它的下拉方法ValueDropID()和ValueDropValue()</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">System.Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Status</span><br>&#123;<br>    <span class="hljs-keyword">public</span> StatusData config;<br><br>    [<span class="hljs-meta">ValueDropdown(nameof(ValueDropID))</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> id;<br>    [<span class="hljs-meta">ValueDropdown(nameof(ValueDropValue))</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (config)<br>            <span class="hljs-keyword">return</span> config.ValueDropID();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (config)<br>            <span class="hljs-keyword">return</span> config.ValueDropValue(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;条件为真/假&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isTrue = <span class="hljs-literal">true</span>;<br>&#125;<br><br>[<span class="hljs-meta">AddComponentMenu(<span class="hljs-string">&quot;Sugarzo触发器/游戏状态触发器&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br>    <span class="hljs-comment">//还有很多其他设置先省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在看看我们写好的效果：</p><p><img src="https://img-blog.csdnimg.cn/1db4a22ae9824a178ff61c2f1e0619ab.png"></p><p><img src="https://img-blog.csdnimg.cn/d0333bcdb26a47bf8c52c70505a311c7.png"><br>嗯嗯，看起来程序运行的十分顺利（？），我们已经正确能在Trigger看到写好的状态并选择他们。很明显，ScriptableObject的数据只存在编辑器中。我们现在的状态数据还没有被装进游戏中。现在应该添加一个MonoBehaviour的管理类脚本，去管理游戏中实时数据了。</p><p>作为一个管理类，应该实现什么功能呢？首先应该是一个单例，随后要有<strong>设置数据/检查数据</strong>的方法，然后是<strong>保存数据/读取数据</strong>的方法，我们先把接口写出来：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusSave</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LoadData</span>()</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>()</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusCheck</span><br>    &#123;<br>        <span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsStatus</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> _data, <span class="hljs-built_in">string</span> _id, <span class="hljs-built_in">string</span> _value</span>)</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetStatus</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> _data, <span class="hljs-built_in">string</span> _id, <span class="hljs-built_in">string</span> _value</span>)</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>这里的方法IsStatus用了三个参数的版本。id/value自然是标记状态名和具体状态的。data主要是表示该状态位于哪一个ScriptableObject中的数据（这里用了前文中的StatusData.Key）</p><p>接着我们注册一个静态类存储一些静态方法，方便我们的Trigger调用：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static <span class="hljs-keyword">class</span> StatusManager<br>    &#123;<br>        <span class="hljs-comment">//存储IStatusCheck的实例</span><br>        public static Dictionary&lt;Type,IStatusCheck&gt; managerInstances = <span class="hljs-keyword">new</span> Dictionary&lt;Type, IStatusCheck&gt;<span class="hljs-literal">()</span>;<br><br>        public static <span class="hljs-built_in">bool</span> <span class="hljs-constructor">IsStatus(StatusData <span class="hljs-params">data</span>, <span class="hljs-params">string</span> ID, <span class="hljs-params">string</span> <span class="hljs-params">value</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (managerInstances.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">data</span>.GetType()</span>))<br>                return managerInstances<span class="hljs-literal">[<span class="hljs-identifier">data</span>.G<span class="hljs-identifier">etType</span>()]</span>.<span class="hljs-constructor">IsStatus(<span class="hljs-params">data</span>.<span class="hljs-params">key</span>, ID, <span class="hljs-params">value</span>)</span>;<br><br>            Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">data</span>.<span class="hljs-params">name</span> + <span class="hljs-string">&quot; 的管理类实例&quot;</span>)</span>;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br>        public static void <span class="hljs-constructor">SetStatus(StatusData <span class="hljs-params">data</span>, <span class="hljs-params">string</span> ID, <span class="hljs-params">string</span> <span class="hljs-params">value</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (managerInstances.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">data</span>.GetType()</span>))<br>            &#123;<br>                Debug.<span class="hljs-constructor">Log(<span class="hljs-string">&quot;切换游戏状态 &quot;</span> + ID + <span class="hljs-string">&quot; -&gt; &quot;</span> + <span class="hljs-params">value</span>)</span>;<br>                managerInstances<span class="hljs-literal">[<span class="hljs-identifier">data</span>.G<span class="hljs-identifier">etType</span>()]</span>.<span class="hljs-constructor">SetStatus(<span class="hljs-params">data</span>.<span class="hljs-params">key</span>, ID, <span class="hljs-params">value</span>)</span>;<br>                EventManager.<span class="hljs-constructor">EmitEvent(EventEnum.GameStatusChange.ToString()</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到设置状态时发送了EventManager.EmitEvent(EventEnum.GameStatusChange.ToString());该事件需要由所有<strong>状态Trigger</strong>监听，意思时修改完状态时，通过发送信号所有Trigger都会检查当前状态是否满足条件，如果满足就执行Action。</p><p>我们回到StatusTrigger实现完其余功能：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">AddComponentMenu(<span class="hljs-string">&quot;Sugarzo触发器/游戏状态触发器&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (IsState())<br>            <span class="hljs-keyword">base</span>.Execute();<br>    &#125;<br>    <span class="hljs-comment">//会在Enable中运行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RegisterSaveTypeEvent</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.RegisterSaveTypeEvent();<br>        <br>        <span class="hljs-keyword">if</span>(status.Count &gt; <span class="hljs-number">0</span>)<br>            EventManager.StartListening(EventEnum.GameStatusChange.ToString(), Execute);<br>    &#125;<br>    <span class="hljs-comment">//会在DisEnable中运行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteSaveTypeEvent</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.DeleteSaveTypeEvent();<br><br>        EventManager.StopListening(EventEnum.GameStatusChange.ToString(), Execute);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsState</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> statu <span class="hljs-keyword">in</span> status)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (StatusManager.IsStatus(statu.config,statu.id,statu.<span class="hljs-keyword">value</span>) != statu.isTrue)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的修改状态的Action：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusAction</span> : <span class="hljs-title">BaseAction</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;设置游戏状态&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunningLogic</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> sta <span class="hljs-keyword">in</span> status)<br>            &#123;<br>                StatusManager.SetStatus(sta.config, sta.id, sta.<span class="hljs-keyword">value</span>);<br>            &#125;<br><br>            RunOver();<br>        &#125;<br><br>        [<span class="hljs-meta">System.Serializable</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Status</span><br>        &#123;<br>            <span class="hljs-keyword">public</span> StatusData config;<br><br>            [<span class="hljs-meta">ValueDropdown(nameof(ValueDropID))</span>]<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> id;<br>            [<span class="hljs-meta">ValueDropdown(nameof(ValueDropValue))</span>]<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span>;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (config)<br>                    <span class="hljs-keyword">return</span> config.ValueDropID();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>()</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (config)<br>                    <span class="hljs-keyword">return</span> config.ValueDropValue(id);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">     接着我们就可以写具体实现了接口IStatusSave和IStatusCheckStatusManager的管理类实例了。为了方便扩展这里使用了三个泛型参数。TData被StatusData约束，&lt;TKey, TValue&gt;对应的也是StatusData的数据类型。    在管理类中，我们需要维护两个东西，一个是需要配置在游戏中的数据List&lt;TData&gt; configs，另一个则是实时数据存储的字典了：Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; configData，我们实时存档的数据都存储在字典中，设置检查状态，读档和存档的操作也是在操作这个类型。</code></pre><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> StatusManager&lt;TData,TKey, TValue&gt; : MonoBehaviour,IStatusSave, IStatusCheck where TData : StatusData&lt;TKey, TValue&gt;<br>    &#123;<br><br>        public <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">bool</span> <span class="hljs-constructor">IsStatus(<span class="hljs-params">string</span> <span class="hljs-params">_data</span>, <span class="hljs-params">string</span> <span class="hljs-params">_id</span>, <span class="hljs-params">string</span> <span class="hljs-params">_value</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(configData.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_data</span>)</span>)<br>                <span class="hljs-keyword">if</span> (configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span>.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_id</span>)</span>)<br>                    return configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">_id</span>]</span>.<span class="hljs-constructor">Equals(<span class="hljs-params">_value</span>)</span>;<br><br>            Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        public <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">SetStatus(<span class="hljs-params">string</span> <span class="hljs-params">_data</span>, <span class="hljs-params">string</span> <span class="hljs-params">_id</span>, <span class="hljs-params">string</span> <span class="hljs-params">_value</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (configData.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_data</span>)</span>)<br>                <span class="hljs-keyword">if</span> (configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span>.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_id</span>)</span>)<br>                &#123;<br>                    configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">_id</span>]</span> = _value;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br>            <span class="hljs-keyword">else</span><br>                Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br><br>            return;<br>        &#125;<br><br>        public List&lt;TData&gt; configs;<br>        protected Dictionary&lt;<span class="hljs-built_in">string</span>, Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;&gt; configData;<br><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">Awake()</span><br>        &#123;<br>            <span class="hljs-constructor">InitData()</span>;<br>            <span class="hljs-constructor">RegisterStatic()</span>; <br>            <span class="hljs-constructor">RegisterSave()</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//初始化字典数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">InitData()</span><br>        &#123;<br>            configData = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;&gt;<span class="hljs-literal">()</span>;<br>            foreach(var config <span class="hljs-keyword">in</span> configs)<br>            &#123;<br>                configData.<span class="hljs-constructor">Add(<span class="hljs-params">config</span>.<span class="hljs-params">key</span>, <span class="hljs-params">new</span> Dictionary&lt;<span class="hljs-params">string</span>, <span class="hljs-params">string</span>&gt;()</span>);<br>                foreach(var cData <span class="hljs-keyword">in</span> config.datas)<br>                &#123;<br>                    configData<span class="hljs-literal">[<span class="hljs-identifier">config</span>.<span class="hljs-identifier">key</span>]</span>.<span class="hljs-constructor">Add(<span class="hljs-params">cData</span>.ID.ToString()</span>, <span class="hljs-built_in">string</span>.Empty);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//注册静态数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">RegisterStatic()</span><br>        &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StatusManager</span>.</span></span>managerInstances.<span class="hljs-constructor">Add(<span class="hljs-params">typeof</span>(TData)</span>, this);<br>        &#125;<br>        <span class="hljs-comment">//注册存档事件监听数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">RegisterSave()</span><br>        &#123;<br>            EventManager.<span class="hljs-constructor">StartListening(EventEnum.GameSave.ToString()</span>, SaveData);<br>            EventManager.<span class="hljs-constructor">StartListening(EventEnum.GameLoad.ToString()</span>, LoadData);<br>        &#125;<br><br><br>        public void <span class="hljs-constructor">LoadData()</span><br>        &#123;<br>            GameSaveManager.<span class="hljs-constructor">LoadData(<span class="hljs-params">this</span>.GetType()</span>.<span class="hljs-constructor">ToString()</span>, out configData);<br>        &#125;<br><br>        public void <span class="hljs-constructor">SaveData()</span><br>        &#123;<br>            GameSaveManager.<span class="hljs-constructor">SaveData(<span class="hljs-params">this</span>.GetType()</span>.<span class="hljs-constructor">ToString()</span>, configData);<br>        &#125;<br><br>        <span class="hljs-literal">[S<span class="hljs-identifier">irenix</span>.O<span class="hljs-identifier">dinInspector</span>.B<span class="hljs-identifier">utton</span>]</span><br>        public void <span class="hljs-constructor">DebugAllStatus()</span><br>        &#123;<br>            foreach (var data <span class="hljs-keyword">in</span> configData)<br>            &#123;<br>                foreach (var cData <span class="hljs-keyword">in</span> data.Value)<br>                &#123;<br>                    Debug.<span class="hljs-constructor">Log(<span class="hljs-params">cData</span>.Key + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-params">cData</span>.Value)</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用这个范式基类派生出我们真正需要的GameStatusManager实例：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">GameStatusManager</span> : <span class="hljs-symbol">StatusManager</span>&lt;<span class="hljs-symbol">GameStatusData,<span class="hljs-symbol">string</span>,<span class="hljs-symbol">string</span></span>&gt;<br>    &#123;<br><br>    &#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">    接着是存档框架，这里使用了ES3.Save和ES3.Load，通过SaveData&lt;T&gt;(string saveKey,T data)的函数签名，可以很方便的存储游戏数据。</code></pre><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameSaveManager</span> : <span class="hljs-title">SingletonMono</span>&lt;<span class="hljs-title">GameSaveManager</span>&gt;<br>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> slotKey = <span class="hljs-string">&quot;Save0&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.Awake();<br>        GameSaveInstance = <span class="hljs-keyword">new</span> GameSave();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameSave <span class="hljs-title">GetGameSave</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Instance.GameSaveInstance;<br>    &#125;<br><br>    [<span class="hljs-meta">Button,ButtonGroup</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveGameToSlot</span>()</span><br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;存储卡槽存档 &quot;</span> + Instance.slotKey);<br><br>        EventManager.EmitEvent(EventEnum.GameSave.ToString());<br>        GetGameSave().slotKey = Instance.slotKey;<br><br>    &#125;<br>    [<span class="hljs-meta">Button, ButtonGroup</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadGameFromSlot</span>()</span><br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;读取卡槽存档 &quot;</span> + Instance.slotKey);<br><br>        EventManager.EmitEvent(EventEnum.GameLoad.ToString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> saveKey,T data</span>)</span><br>    &#123;<br>        Debug.Log(saveKey + <span class="hljs-string">&quot; 保存&quot;</span>);<br>        ES3.Save(Instance.slotKey + <span class="hljs-string">&quot;@&quot;</span> + saveKey,data);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> saveKey,<span class="hljs-keyword">out</span> T data</span>)</span><br>    &#123;<br>        Debug.Log(saveKey + <span class="hljs-string">&quot; 读取&quot;</span>);<br>        data = (T)ES3.Load(Instance.slotKey + <span class="hljs-string">&quot;@&quot;</span> + saveKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">    好了这里的框架就分析了。虽然感觉是有点乱（？）把这一部分的源码上传到了github，有兴趣的可以参考参考，框架内已内置Odin和EasySave3插件。有问题欢迎讨论[GitHub - sugarzo/UnityFrame: 一些unity框架，目前只做到了Trigger/Action/状态表示系统](https://github.com/sugarzo/UnityFrame &quot;GitHub - sugarzo/UnityFrame: 一些unity框架，目前只做到了Trigger/Action/状态表示系统&quot;)    后面可能还会有几篇文档，可能会讲讲unity的编辑器拓展，动态管理窗口配置啥的。（下次一定）</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Allp</title>
    <link href="/2022/09/23/Allp/"/>
    <url>/2022/09/23/Allp/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>article title</title>
    <link href="/2022/09/23/article-title/"/>
    <url>/2022/09/23/article-title/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/09/23/hello-world/"/>
    <url>/2022/09/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
