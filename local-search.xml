<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Unity 状态机事件流程框架 (二) 设计游戏状态的保存框架，存档功能 ScriptableObject、EasySave</title>
    <link href="/2022/09/23/%5BUnity%5D%20%E7%8A%B6%E6%80%81%E6%9C%BA%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6%20(%E4%BA%8C)%20%E8%AE%BE%E8%AE%A1%E6%B8%B8%E6%88%8F%E7%8A%B6%E6%80%81%E7%9A%84%E4%BF%9D%E5%AD%98%E6%A1%86%E6%9E%B6%EF%BC%8C%E5%AD%98%E6%A1%A3%E5%8A%9F%E8%83%BD%20ScriptableObject%E3%80%81EasySave/"/>
    <url>/2022/09/23/%5BUnity%5D%20%E7%8A%B6%E6%80%81%E6%9C%BA%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%A8%8B%E6%A1%86%E6%9E%B6%20(%E4%BA%8C)%20%E8%AE%BE%E8%AE%A1%E6%B8%B8%E6%88%8F%E7%8A%B6%E6%80%81%E7%9A%84%E4%BF%9D%E5%AD%98%E6%A1%86%E6%9E%B6%EF%BC%8C%E5%AD%98%E6%A1%A3%E5%8A%9F%E8%83%BD%20ScriptableObject%E3%80%81EasySave/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_51776409/article/details/124854564" title="前文 ： ​​​​​​​​​​​​​​[Unity] 状态机事件流程框架 (一)">前文 ： ​​​​​​​[Unity] 状态机事件流程框架 (一)</a></p><p>本期来设计一个游戏状态的怎么在游戏中表示和存储。保存游戏状态的目的一是方便根据玩家当前的游戏进度实行各种各样的逻辑分支，二是在存档时能记录实时的游戏数据，方便读档回到存档位置。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>实现的效果图如下（图为作者参与过项目展示，图一的例子为游戏流程-序章剧情中某一处需要触发摄像机引导的Trigger配置，图二为在框架中自定义游戏状态表示，并可以使用一个Trigger去访问它。其中编辑器窗体由Odin制作，不在本期讨论范围）</p><p><img src="https://img-blog.csdnimg.cn/7ce6efe3972347bb8e99188ff848d372.png"></p><p><img src="https://img-blog.csdnimg.cn/17de83d7fe874e29b7f375823b1b9436.png"></p><p>最后所有的状态都能被写入磁盘（EasySave实现）</p><p> <img src="https://img-blog.csdnimg.cn/5b217bc8d0c74717bb8ae7c456effa5b.png"></p><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="如何在游戏中存储状态："><a href="#如何在游戏中存储状态：" class="headerlink" title="如何在游戏中存储状态："></a>如何在游戏中存储状态：</h2><p>一般来说，我们会使用unity中ScriptableObject来表示游戏中一些数据，方便我们在游戏编辑器下的编辑，但使用ScriptableObject时需要搞清楚几个概念。首先分享一个在M_Studio中背包系统视频下的一条评论：</p><p><img src="https://img-blog.csdnimg.cn/216cf9eea6ca4fb9b8fb05000e808cf0.png"></p><p>总结就是：游戏中的数据分为<strong>持久化数据</strong>和<strong>非持久化数据</strong>。比如一个物品可能由A、B、C三种状态，这里的<strong>物品</strong>和<strong>状态列表</strong>就可以使用一个ScriptableObject进行存储（即非持久化数据，使用List可进行存储）。当游戏开始运行时，某一刻该物品的状态是B，此时我们要读取状态做判断或者存档操作时，我们不需要知道该物品是否有其他状态（A、C），只需要知道【物品状态-&gt;B】的关系就可以了。这个就是需要持久化数据，这种一一对应的关系比较适合用字典方式来实现它。</p><p>因此，我们将游戏状态需要的数据分离成可持久化和非持久化，并需要将它们表示在不同的脚本位置。</p><p>非持久化数据：状态名（String），拥有的状态列表（List<String>），应放在ScriptableObject中</p><p>持久化数据：状态名，当前状态（Dictionary&lt;string,string&gt;），应放在MonoBehaviour脚本上。该脚本一般是拥有单例模式的管理类。</p><p>我们先表示以下怎么使用状态的ScriptableObject表示。这里的ValueDropID和ValueDropValue方法主要提供给是在Trigger使用下拉菜单。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusCheck</span>&lt;<span class="hljs-title">TKey</span>,<span class="hljs-title">TValue</span>&gt;<br>&#123;<br>    <span class="hljs-function">List&lt;TKey&gt; <span class="hljs-title">SelectID</span>()</span>;<br>    <span class="hljs-function">List&lt;TValue&gt; <span class="hljs-title">SelectValue</span>(<span class="hljs-params">TKey ID</span>)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusData</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        key = <span class="hljs-keyword">this</span>.GetType().ToString() + <span class="hljs-string">&quot;-&quot;</span> + name;<br>    &#125;<br>    [<span class="hljs-meta">Header(<span class="hljs-string">&quot;请保证key值唯一&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> key;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> id</span>)</span>;<br>&#125;<br><br><span class="hljs-comment">//实现范式版本</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusData</span>&lt;<span class="hljs-title">TKey</span>, <span class="hljs-title">TValue</span>&gt; : <span class="hljs-title">StatusData</span>, <span class="hljs-title">IStatusCheck</span>&lt;<span class="hljs-title">TKey</span>, <span class="hljs-title">TValue</span>&gt;<br>&#123;<br>    [<span class="hljs-meta">Header(<span class="hljs-string">&quot;备注&quot;</span>),TextArea</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> content;<br><br>    [<span class="hljs-meta">Space</span>]<br>    <span class="hljs-keyword">public</span> List&lt;Data&gt; datas;<br><br>    [<span class="hljs-meta">Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Data</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> TKey ID;<br>        <span class="hljs-keyword">public</span> List&lt;TValue&gt; Values;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>    &#123;<br>        List&lt;<span class="hljs-built_in">string</span>&gt; retList = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> id <span class="hljs-keyword">in</span> datas)<br>        &#123;<br>            retList.Add(id.ID.ToString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> retList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> id</span>)</span><br>    &#123;<br>        List&lt;<span class="hljs-built_in">string</span>&gt; retList = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br><br>        <span class="hljs-keyword">var</span> selectData = datas.Find(x =&gt; x.ID.ToString() == id.ToString());<br>        <span class="hljs-keyword">if</span> (selectData != <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> str <span class="hljs-keyword">in</span> selectData.Values)<br>                retList.Add(str.ToString());<br>        &#125;<br>            <br><br>        <span class="hljs-keyword">return</span> retList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里具体实现游戏状态，使用 StatusData&lt;string, string&gt;进行派生就好啦。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[CreateAssetMenu(menuName = &quot;新建状态/游戏状态&quot;)]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">GameStatusData</span> : <span class="hljs-symbol">StatusData</span>&lt;<span class="hljs-symbol">string, <span class="hljs-symbol">string</span></span>&gt;<br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们设置对应的Trigger，使用它的下拉方法ValueDropID()和ValueDropValue()</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">System.Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Status</span><br>&#123;<br>    <span class="hljs-keyword">public</span> StatusData config;<br><br>    [<span class="hljs-meta">ValueDropdown(nameof(ValueDropID))</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> id;<br>    [<span class="hljs-meta">ValueDropdown(nameof(ValueDropValue))</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (config)<br>            <span class="hljs-keyword">return</span> config.ValueDropID();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (config)<br>            <span class="hljs-keyword">return</span> config.ValueDropValue(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;条件为真/假&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isTrue = <span class="hljs-literal">true</span>;<br>&#125;<br><br>[<span class="hljs-meta">AddComponentMenu(<span class="hljs-string">&quot;Sugarzo触发器/游戏状态触发器&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br>    <span class="hljs-comment">//还有很多其他设置先省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在看看我们写好的效果：</p><p><img src="https://img-blog.csdnimg.cn/1db4a22ae9824a178ff61c2f1e0619ab.png"></p><p><img src="https://img-blog.csdnimg.cn/d0333bcdb26a47bf8c52c70505a311c7.png"><br>嗯嗯，看起来程序运行的十分顺利（？），我们已经正确能在Trigger看到写好的状态并选择他们。很明显，ScriptableObject的数据只存在编辑器中。我们现在的状态数据还没有被装进游戏中。现在应该添加一个MonoBehaviour的管理类脚本，去管理游戏中实时数据了。</p><p>作为一个管理类，应该实现什么功能呢？首先应该是一个单例，随后要有<strong>设置数据/检查数据</strong>的方法，然后是<strong>保存数据/读取数据</strong>的方法，我们先把接口写出来：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusSave</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LoadData</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusCheck</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsStatus</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> _data, <span class="hljs-built_in">string</span> _id, <span class="hljs-built_in">string</span> _value</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetStatus</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> _data, <span class="hljs-built_in">string</span> _id, <span class="hljs-built_in">string</span> _value</span>)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里的方法IsStatus用了三个参数的版本。id/value自然是标记状态名和具体状态的。data主要是表示该状态位于哪一个ScriptableObject中的数据（这里用了前文中的StatusData.Key）</p><p>接着我们注册一个静态类存储一些静态方法，方便我们的Trigger调用：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static <span class="hljs-keyword">class</span> StatusManager<br>&#123;<br>    <span class="hljs-comment">//存储IStatusCheck的实例</span><br>    public static Dictionary&lt;Type,IStatusCheck&gt; managerInstances = <span class="hljs-keyword">new</span> Dictionary&lt;Type, IStatusCheck&gt;<span class="hljs-literal">()</span>;<br><br>    public static <span class="hljs-built_in">bool</span> <span class="hljs-constructor">IsStatus(StatusData <span class="hljs-params">data</span>, <span class="hljs-params">string</span> ID, <span class="hljs-params">string</span> <span class="hljs-params">value</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (managerInstances.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">data</span>.GetType()</span>))<br>            return managerInstances<span class="hljs-literal">[<span class="hljs-identifier">data</span>.G<span class="hljs-identifier">etType</span>()]</span>.<span class="hljs-constructor">IsStatus(<span class="hljs-params">data</span>.<span class="hljs-params">key</span>, ID, <span class="hljs-params">value</span>)</span>;<br><br>        Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">data</span>.<span class="hljs-params">name</span> + <span class="hljs-string">&quot; 的管理类实例&quot;</span>)</span>;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>    public static void <span class="hljs-constructor">SetStatus(StatusData <span class="hljs-params">data</span>, <span class="hljs-params">string</span> ID, <span class="hljs-params">string</span> <span class="hljs-params">value</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (managerInstances.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">data</span>.GetType()</span>))<br>        &#123;<br>            Debug.<span class="hljs-constructor">Log(<span class="hljs-string">&quot;切换游戏状态 &quot;</span> + ID + <span class="hljs-string">&quot; -&gt; &quot;</span> + <span class="hljs-params">value</span>)</span>;<br>            managerInstances<span class="hljs-literal">[<span class="hljs-identifier">data</span>.G<span class="hljs-identifier">etType</span>()]</span>.<span class="hljs-constructor">SetStatus(<span class="hljs-params">data</span>.<span class="hljs-params">key</span>, ID, <span class="hljs-params">value</span>)</span>;<br>            EventManager.<span class="hljs-constructor">EmitEvent(EventEnum.GameStatusChange.ToString()</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到设置状态时发送了EventManager.EmitEvent(EventEnum.GameStatusChange.ToString());该事件需要由所有<strong>状态Trigger</strong>监听，意思时修改完状态时，通过发送信号所有Trigger都会检查当前状态是否满足条件，如果满足就执行Action。</p><p>我们回到StatusTrigger实现完其余功能：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">AddComponentMenu(<span class="hljs-string">&quot;Sugarzo触发器/游戏状态触发器&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (IsState())<br>            <span class="hljs-keyword">base</span>.Execute();<br>    &#125;<br>    <span class="hljs-comment">//会在Enable中运行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RegisterSaveTypeEvent</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.RegisterSaveTypeEvent();<br>        <br>        <span class="hljs-keyword">if</span>(status.Count &gt; <span class="hljs-number">0</span>)<br>            EventManager.StartListening(EventEnum.GameStatusChange.ToString(), Execute);<br>    &#125;<br>    <span class="hljs-comment">//会在DisEnable中运行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteSaveTypeEvent</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.DeleteSaveTypeEvent();<br><br>        EventManager.StopListening(EventEnum.GameStatusChange.ToString(), Execute);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsState</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> statu <span class="hljs-keyword">in</span> status)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (StatusManager.IsStatus(statu.config,statu.id,statu.<span class="hljs-keyword">value</span>) != statu.isTrue)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的修改状态的Action：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusAction</span> : <span class="hljs-title">BaseAction</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;设置游戏状态&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunningLogic</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> sta <span class="hljs-keyword">in</span> status)<br>            &#123;<br>                StatusManager.SetStatus(sta.config, sta.id, sta.<span class="hljs-keyword">value</span>);<br>            &#125;<br><br>            RunOver();<br>        &#125;<br><br>        [<span class="hljs-meta">System.Serializable</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Status</span><br>        &#123;<br>            <span class="hljs-keyword">public</span> StatusData config;<br><br>            [<span class="hljs-meta">ValueDropdown(nameof(ValueDropID))</span>]<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> id;<br>            [<span class="hljs-meta">ValueDropdown(nameof(ValueDropValue))</span>]<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span>;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (config)<br>                    <span class="hljs-keyword">return</span> config.ValueDropID();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>()</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (config)<br>                    <span class="hljs-keyword">return</span> config.ValueDropValue(id);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>接着我们就可以写具体实现了接口IStatusSave和IStatusCheckStatusManager的管理类实例了。为了方便扩展这里使用了三个泛型参数。TData被StatusData约束，&lt;TKey, TValue&gt;对应的也是StatusData的数据类型。</p><p>在管理类中，我们需要维护两个东西，一个是需要配置在游戏中的数据List<TData> configs，另一个则是实时数据存储的字典了：Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; configData，我们实时存档的数据都存储在字典中，设置检查状态，读档和存档的操作也是在操作这个类型。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> StatusManager&lt;TData,TKey, TValue&gt; : MonoBehaviour,IStatusSave, IStatusCheck where TData : StatusData&lt;TKey, TValue&gt;<br>    &#123;<br><br>        public <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">bool</span> <span class="hljs-constructor">IsStatus(<span class="hljs-params">string</span> <span class="hljs-params">_data</span>, <span class="hljs-params">string</span> <span class="hljs-params">_id</span>, <span class="hljs-params">string</span> <span class="hljs-params">_value</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(configData.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_data</span>)</span>)<br>                <span class="hljs-keyword">if</span> (configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span>.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_id</span>)</span>)<br>                    return configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">_id</span>]</span>.<span class="hljs-constructor">Equals(<span class="hljs-params">_value</span>)</span>;<br><br>            Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        public <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">SetStatus(<span class="hljs-params">string</span> <span class="hljs-params">_data</span>, <span class="hljs-params">string</span> <span class="hljs-params">_id</span>, <span class="hljs-params">string</span> <span class="hljs-params">_value</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (configData.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_data</span>)</span>)<br>                <span class="hljs-keyword">if</span> (configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span>.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_id</span>)</span>)<br>                &#123;<br>                    configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">_id</span>]</span> = _value;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br>            <span class="hljs-keyword">else</span><br>                Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br><br>            return;<br>        &#125;<br><br>        public List&lt;TData&gt; configs;<br>        protected Dictionary&lt;<span class="hljs-built_in">string</span>, Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;&gt; configData;<br><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">Awake()</span><br>        &#123;<br>            <span class="hljs-constructor">InitData()</span>;<br>            <span class="hljs-constructor">RegisterStatic()</span>; <br>            <span class="hljs-constructor">RegisterSave()</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//初始化字典数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">InitData()</span><br>        &#123;<br>            configData = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;&gt;<span class="hljs-literal">()</span>;<br>            foreach(var config <span class="hljs-keyword">in</span> configs)<br>            &#123;<br>                configData.<span class="hljs-constructor">Add(<span class="hljs-params">config</span>.<span class="hljs-params">key</span>, <span class="hljs-params">new</span> Dictionary&lt;<span class="hljs-params">string</span>, <span class="hljs-params">string</span>&gt;()</span>);<br>                foreach(var cData <span class="hljs-keyword">in</span> config.datas)<br>                &#123;<br>                    configData<span class="hljs-literal">[<span class="hljs-identifier">config</span>.<span class="hljs-identifier">key</span>]</span>.<span class="hljs-constructor">Add(<span class="hljs-params">cData</span>.ID.ToString()</span>, <span class="hljs-built_in">string</span>.Empty);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//注册静态数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">RegisterStatic()</span><br>        &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StatusManager</span>.</span></span>managerInstances.<span class="hljs-constructor">Add(<span class="hljs-params">typeof</span>(TData)</span>, this);<br>        &#125;<br>        <span class="hljs-comment">//注册存档事件监听数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">RegisterSave()</span><br>        &#123;<br>            EventManager.<span class="hljs-constructor">StartListening(EventEnum.GameSave.ToString()</span>, SaveData);<br>            EventManager.<span class="hljs-constructor">StartListening(EventEnum.GameLoad.ToString()</span>, LoadData);<br>        &#125;<br><br><br>        public void <span class="hljs-constructor">LoadData()</span><br>        &#123;<br>            GameSaveManager.<span class="hljs-constructor">LoadData(<span class="hljs-params">this</span>.GetType()</span>.<span class="hljs-constructor">ToString()</span>, out configData);<br>        &#125;<br><br>        public void <span class="hljs-constructor">SaveData()</span><br>        &#123;<br>            GameSaveManager.<span class="hljs-constructor">SaveData(<span class="hljs-params">this</span>.GetType()</span>.<span class="hljs-constructor">ToString()</span>, configData);<br>        &#125;<br><br>        <span class="hljs-literal">[S<span class="hljs-identifier">irenix</span>.O<span class="hljs-identifier">dinInspector</span>.B<span class="hljs-identifier">utton</span>]</span><br>        public void <span class="hljs-constructor">DebugAllStatus()</span><br>        &#123;<br>            foreach (var data <span class="hljs-keyword">in</span> configData)<br>            &#123;<br>                foreach (var cData <span class="hljs-keyword">in</span> data.Value)<br>                &#123;<br>                    Debug.<span class="hljs-constructor">Log(<span class="hljs-params">cData</span>.Key + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-params">cData</span>.Value)</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用这个范式基类派生出我们真正需要的GameStatusManager实例：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">GameStatusManager</span> : <span class="hljs-symbol">StatusManager</span>&lt;<span class="hljs-symbol">GameStatusData,<span class="hljs-symbol">string</span>,<span class="hljs-symbol">string</span></span>&gt;<br>    &#123;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>接着是存档框架，这里使用了ES3.Save和ES3.Load，通过SaveData<T>(string saveKey,T data)的函数签名，可以很方便的存储游戏数据。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameSaveManager</span> : <span class="hljs-title">SingletonMono</span>&lt;<span class="hljs-title">GameSaveManager</span>&gt;<br>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> slotKey = <span class="hljs-string">&quot;Save0&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.Awake();<br>        GameSaveInstance = <span class="hljs-keyword">new</span> GameSave();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameSave <span class="hljs-title">GetGameSave</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Instance.GameSaveInstance;<br>    &#125;<br><br>    [<span class="hljs-meta">Button,ButtonGroup</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveGameToSlot</span>()</span><br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;存储卡槽存档 &quot;</span> + Instance.slotKey);<br><br>        EventManager.EmitEvent(EventEnum.GameSave.ToString());<br>        GetGameSave().slotKey = Instance.slotKey;<br><br>    &#125;<br>    [<span class="hljs-meta">Button, ButtonGroup</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadGameFromSlot</span>()</span><br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;读取卡槽存档 &quot;</span> + Instance.slotKey);<br><br>        EventManager.EmitEvent(EventEnum.GameLoad.ToString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> saveKey,T data</span>)</span><br>    &#123;<br>        Debug.Log(saveKey + <span class="hljs-string">&quot; 保存&quot;</span>);<br>        ES3.Save(Instance.slotKey + <span class="hljs-string">&quot;@&quot;</span> + saveKey,data);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> saveKey,<span class="hljs-keyword">out</span> T data</span>)</span><br>    &#123;<br>        Debug.Log(saveKey + <span class="hljs-string">&quot; 读取&quot;</span>);<br>        data = (T)ES3.Load(Instance.slotKey + <span class="hljs-string">&quot;@&quot;</span> + saveKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好了这里的框架就分析了。虽然感觉是有点乱（？）把这一部分的源码上传到了github，有兴趣的可以参考参考，框架内已内置Odin和EasySave3插件。有问题欢迎讨论<a href="https://github.com/sugarzo/UnityFrame" title="GitHub - sugarzo/UnityFrame: 一些unity框架，目前只做到了Trigger/Action/状态表示系统">GitHub - sugarzo/UnityFrame: 一些unity框架，目前只做到了Trigger/Action/状态表示系统</a></p><p>后面可能还会有几篇文档，可能会讲讲unity的编辑器拓展，动态管理窗口配置啥的。（下次一定）</p>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Unity框架设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 状态机事件流程框架 (一)（C#事件系统，Trigger与Action）</title>
    <link href="/2022/09/23/Unity%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/09/23/Unity%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>设计游戏时，框架设计时十分重要的，项目内容一大，各个功能系统间的耦合性就会不可避免的增加，如果初期时没有规划好，后期维护时成本就会大大增加。观察者模式时框架设计时常用的一种解耦方式。</p><p><strong>观察者模式</strong>（Observer Pattern）是一种一对多的关系时。比如，当一个对象被修改时，则会自动通知依赖它的对象（广播）。观察者模式属于行为型模式，有着易用和低耦合，保证高度的协作的优势。</p><p>本期是在Unity实现一个简单的框架应用。这可以减少脚本的编写量，通过预先在脚本中写好可以复用的功能，并在场景的游戏物品中修改脚本中的参数，就可控制事件的发送和执行的事件内容。有着简单使用，方便扩张的有点。</p><p>这套框架是今年打CUSGA和项目主程（帅神）学到的，自己从中总结了很多知识，自己也针对其中的思想做了优化。也欢迎来bilibili给游戏宣传片贡献播放量（x</p><p><a href="https://www.bilibili.com/video/BV1GA4y197hY?spm_id_from=333.337.search-card.all.click&vd_source=0700bf835ba9b724fbf90b19be87fb23" title="【CUSGA 2022】《藏星》温暖治愈的剧情解谜游戏">【CUSGA 2022】《藏星》温暖治愈的剧情解谜游戏</a></p><h1 id="框架概要"><a href="#框架概要" class="headerlink" title="框架概要"></a>框架概要</h1><p>（本文脚本中使用了odin插件）</p><p>我们先使用一个简单的例子作为引入：</p><p><img src="https://img-blog.csdnimg.cn/66e9df7925bb44d9b827bd1bd8bcea32.gif"></p><p>可以看到，在我们点击了按钮后，一个游戏方块向左移动，在向右移动完成后，方块被摧毁并且debug了一段信息。是一个非常简单的游戏逻辑。如果让这段逻辑变得可复用和好维护，是我们框架的主要目标（比如我们写好了一个移动功能，那么下次再遇到类似的逻辑就可以拿出来直接使用，而不需要再创建一段代码）。我们从以上逻辑拆分以下模块并让它直观化：</p><p>玩家按下按钮（触发器Trigger）</p><p>-&gt;物品移动（事件Action）</p><p>-&gt;物品销毁（事件Action）</p><p>-&gt;Debug信息（事件Action）</p><p><img src="https://img-blog.csdnimg.cn/adba4a8e4644492f985bebf1f0d466d6.png"></p><p>使用结构类似一个文件管理的树状层次结构，我们使用单个游戏物品，用来表示一个触发器或者一个事件。每个单独事件作为一个子物品，将放在一个触发器下，当触发器条件被满足时，事件将会被会被顺序执行。且trigger和Action可以再Inspector窗口中编辑，查看他们当前的状态。</p><p><img src="https://img-blog.csdnimg.cn/5611ea9d56b44e0cba4086c7813ea8b1.png"></p><p> <img src="https://img-blog.csdnimg.cn/59ba36b70f0546359a450c3c87d12d69.png"></p><p><img src="https://img-blog.csdnimg.cn/3280edde793e4e949f7b67ce5b2a2164.png"></p><p><img src="https://img-blog.csdnimg.cn/a904128ec18942eebe64ce088cd84283.png"></p><p>现在我们开始设计以下这个流程。简单思考，如果我们需要在游戏中执行某个逻辑（事件），最基础的流程如下：</p><p><strong>收到触发该事件的指令-&gt;执行该事件内容-&gt;事件执行完成，执行下一步操作（回调）</strong></p><p>我们定义几个基本概念：</p><p>**Trigger:**触发器-决定了事件什么时候被触发。比如玩家按下某一按键、某个游戏状态改变、另一个事件完成时会触发。我们需要根据需求，自定义各个类型的触发器，当条件被满足时，便执行该触发器所绑定的事件内容。</p><p>**Action:**事件执行内容。游戏中会有各种各样需要实现的逻辑，为方便游戏搭建和维护，我们需要将各个功能模块划分出来，并提供一个统一的接口给Trigger调用，支持各个不同类型事件的排列组合。</p><p>我们先为上面两个概念提供最基础的状态框架，这里使用了一个抽象类作为Trigger和Action的统一基类，通过 protected virtual 留下了几个经典的状态机函数（进入，执行，退出）， executeType表示了当前的状态。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseState</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        [<span class="hljs-meta">TextArea, LabelText(<span class="hljs-string">&quot;说明&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> content;<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;当前状态&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> ExecuteType executeType;<br><br>        <span class="hljs-keyword">public</span> BaseState parentState;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> ExecuteType<br>        &#123;<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;未执行&quot;</span>)</span>] None,<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;准备执行&quot;</span>)</span>] Enter,<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;正在执行&quot;</span>)</span>] Running,<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;执行完成 待机&quot;</span>)</span>] RunOver,<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;执行完成 退出&quot;</span>)</span>] Exit,<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            executeType = ExecuteType.None;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnter</span>()</span><br>        &#123;<br>            executeType = ExecuteType.Enter;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRunning</span>()</span><br>        &#123;<br>            executeType = ExecuteType.Running;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRunOver</span>()</span><br>        &#123;<br>            executeType = ExecuteType.RunOver;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnExit</span>()</span><br>        &#123;<br>            executeType = ExecuteType.Exit;<br>        &#125;<br><br><br>        [<span class="hljs-meta">Button(<span class="hljs-string">&quot;执行该状态&quot;</span>)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>        &#123;<br>            OnEnter();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Running</span>()</span><br>        &#123;<br>            OnRunning();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunOver</span>()</span><br>        &#123;<br>            OnRunOver();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Exit</span>()</span><br>        &#123;<br>            OnExit();<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnValidate</span>()</span><br>        &#123;<br><br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnAddState</span>()</span><br>        &#123;<br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Trigger-触发器"><a href="#Trigger-触发器" class="headerlink" title="Trigger-触发器"></a>Trigger-触发器</h2><p>触发器是决定事件何时被触发的关键。在传统的消息事件框架中，使用SendMessage等进行发送事件，这依靠反射机制查找消息不仅损耗性能，也不利于后期维护；而直接引用对应脚本调用对应的public函数等方式，则会大大提高程序的耦合度。</p><p>这里我们主要使用观察者模式和委托的思想去设置对应的Trigger。因为触发器应该是独立存在的个体，当它存在时它应该自动去监听事件是否发生，而消失时也会自动注销监听，不会与其他功能组件和脚本发生嵌套关系。我们继承BaseState重写方法来实现它：</p><p>一个Trigger需要的模块有：</p><p>1.一个触发这个Trigger的方式</p><p>2.执行事件，即调用子物体下的第一个Action，并能保证Action按照顺序执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseTrigger</span> : <span class="hljs-title">BaseState</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;Trigger&quot;</span>)</span>]<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;执行Action&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> List&lt;BaseAction&gt; actions;<br><br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;在DisOnEnable中注销事件&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> DeleteEventOnDisEnable = <span class="hljs-literal">false</span>;    <br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetActions</span>()</span><br>        &#123;<br>            addActions.Clear();<br>            actions = <span class="hljs-keyword">new</span> List&lt;BaseAction&gt;(GetComponentsInChildren&lt;BaseAction&gt;());<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            GetActions();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (executeType == ExecuteType.Running)<br>                <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-keyword">base</span>.Execute();<br><br>            Running();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Running</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Running();<br>            <span class="hljs-comment">//执行第一个命令</span><br>            <span class="hljs-keyword">if</span> (actions != <span class="hljs-literal">null</span> &amp;&amp; actions.Count &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                actions[<span class="hljs-number">0</span>].Execute();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                RunOver();<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunOver</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.RunOver();<br><br>            Exit();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Exit</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Exit();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnDisable();<br><br>            <span class="hljs-keyword">if</span> (DeleteEventOnDisEnable)<br>                DeleteSaveTypeEvent();<br>        &#125;<br><br>        [<span class="hljs-meta">Button(<span class="hljs-string">&quot;绑定事件&quot;</span>)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RegisterSaveTypeEvent</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//EventManager.StartListening(&quot;&quot;);</span><br>        &#125;<br><br>        [<span class="hljs-meta">Button(<span class="hljs-string">&quot;注销事件&quot;</span>)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteSaveTypeEvent</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//EventManager.StopListening(&quot;&quot;);</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们先用了一个List<Action>获得了搭载该脚本物品的子物品下的Action函数，重写了Running()，状态的执行函数，让他执行子物品下第一个Action。同时，我们新建了两个函数RegisterSaveTypeEvent()和DeleteSaveTypeEvent()，用于监听事件的发生，当事件发生时执行对应的Execute函数即可。</p><p>比如这个Trigger用来绑定一个按钮，我们来实现一个ButtonTrigger，当玩家按下某个button时执行对应的事件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ButtonTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;ButtonTrigger&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> Button btn;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Start();<br><br>            RegisterSaveTypeEvent();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnDestroy();<br><br>            DeleteSaveTypeEvent();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RegisterSaveTypeEvent</span>()</span><br>        &#123;<br>            btn.onClick.AddListener(Execute);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteSaveTypeEvent</span>()</span><br>        &#123;<br>            btn.onClick.RemoveListener(Execute);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Action-事件执行内容"><a href="#Action-事件执行内容" class="headerlink" title="Action-事件执行内容"></a>Action-事件执行内容</h2><p>Trigger将顺序运行子物品下的所有Action,因此我们的Action需要的模块有：</p><p>1.实现自己需要的功能</p><p>2.当执行完成后，告知Trigger可以执行下一个Action了</p><p>3.当自己为Action列表最后一个时，告知Trigger所有事件已执行完毕，Trigger切换成已执行完成状态</p><p>我们来实现一个通用的BaseAction基类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseAction</span> : <span class="hljs-title">BaseState</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;Action&quot;</span>)</span>]<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;延迟多少秒进入&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> delayTime;<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;延迟多少秒执行下一个&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> waitTime;<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;增加一段具体逻辑&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> UnityEvent _unityEvent;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            parentState = GetComponentInParent&lt;BaseTrigger&gt;();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute();<br><br>            <span class="hljs-keyword">if</span>(delayTime &gt; <span class="hljs-number">0</span>)<br>                Invoke(<span class="hljs-keyword">nameof</span>(Running), delayTime);<br>            <span class="hljs-keyword">else</span><br>                Running();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Running</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Running();<br>            RunningLogic();<br><br>        &#125;<br><br>        <span class="hljs-comment">//新Action只需重写RunningLogic()即可,并在结束时调用RunOver();</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunningLogic</span>()</span><br>        &#123;<br>            _unityEvent?.Invoke();<br><br>            <span class="hljs-comment">//RunOver();</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunOver</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.RunOver();<br><br>            <span class="hljs-keyword">if</span> (waitTime &gt; <span class="hljs-number">0</span>)<br>                Invoke(<span class="hljs-keyword">nameof</span>(Exit), waitTime);<br>            <span class="hljs-keyword">else</span><br>                Exit();<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Exit</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//检查父节点Trigger，执行下一条命令或者结束Trigger</span><br>            <span class="hljs-keyword">if</span> (parentState != <span class="hljs-literal">null</span> &amp;&amp; parentState <span class="hljs-keyword">is</span> BaseTrigger baseTrigger)<br>            &#123;<br>                <span class="hljs-comment">//顺序执行</span><br>                <span class="hljs-keyword">var</span> index = baseTrigger.actions.IndexOf(<span class="hljs-keyword">this</span>);<br>                index++;<br>                <span class="hljs-keyword">if</span> (index &gt;= baseTrigger.actions.Count)<br>                &#123;<br>                    baseTrigger.RunOver();<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    baseTrigger.actions[index].Execute();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">base</span>.Exit();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnValidate</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnValidate();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们使用了UnityEvent方便我们可能的后续扩展。在派生类中可通过重写RunLogic（）实现我们需要的功能。在退出状态Exit()中，我们需要获得父物体Trigger，并检测自己对应Action列表的索引Index，并执行Trigger下Index+1的事件或者实行Trigger的RunOver事件来表示事件已经被执行完成。</p><p>我们用它来实现一个简单的Debug功能，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DebugLogAction</span> : <span class="hljs-title">BaseAction</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;DebugLogAction&quot;</span>),TextArea</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> DebugContent = <span class="hljs-string">&quot;DebugLogAction Execute&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> Log = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> LogWarning = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> LogError = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunningLogic</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.RunningLogic();<br>            <span class="hljs-keyword">if</span>(Log)<br>                Debug.Log(DebugContent);<br>            <span class="hljs-keyword">if</span>(LogWarning)<br>                Debug.LogWarning(DebugContent);<br>            <span class="hljs-keyword">if</span>(LogError)<br>                Debug.LogError(DebugContent);<br><br>            RunOver();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>通过这个简单的例子，介绍了框架基本原理，在此基础上也很方便进行扩展。如果还有下期，会讲讲在这个框架上控制游戏状态的存储改变和其他拓展功能。</p><p>接着我们联立以下这篇帖子，实现一个事件在观察者模式下的监听Trigger</p><p><a href="https://blog.csdn.net/m0_51776409/article/details/126150120?spm=1001.2014.3001.5501" title="[Unity] C#使用委托事件与字典实现unity消息中心（观察者模式）_Sugarzo的博客-CSDN博客">[Unity] C#使用委托事件与字典实现unity消息中心（观察者模式）_Sugarzo的博客-CSDN博客</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>    &#123;    <br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;EventTrigger&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> EventEnum eventEnum;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Awake();<br>            <br>            EventManager.StartListening(eventEnum.ToString(),Execute);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnDestroy();<br><br>            EventManager.StopListening(eventEnum.ToString(), Execute);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//一个事件类型的枚举，根据项目需求进行添加</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> EventEnum<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Unity</tag>
      
      <tag>Unity框架设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
