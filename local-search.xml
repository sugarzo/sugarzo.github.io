<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Unity 框架设计（三） Odin编辑器窗口扩展，Asset资源的创建和管理（脚本文件创建、预制体、System.IO、AssetDatabase、Selection）</title>
    <link href="/2022/09/30/%E3%80%90Unity%E3%80%91%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89%20Odin%E7%BC%96%E8%BE%91%E5%99%A8%E7%AA%97%E5%8F%A3%E6%89%A9%E5%B1%95%EF%BC%8CAsset%E8%B5%84%E6%BA%90%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%EF%BC%88%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E3%80%81%E9%A2%84%E5%88%B6%E4%BD%93%E3%80%81System.IO%E3%80%81AssetDatabase%E3%80%81Selection%EF%BC%89/"/>
    <url>/2022/09/30/%E3%80%90Unity%E3%80%91%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%EF%BC%88%E4%B8%89%EF%BC%89%20Odin%E7%BC%96%E8%BE%91%E5%99%A8%E7%AA%97%E5%8F%A3%E6%89%A9%E5%B1%95%EF%BC%8CAsset%E8%B5%84%E6%BA%90%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%EF%BC%88%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E5%88%9B%E5%BB%BA%E3%80%81%E9%A2%84%E5%88%B6%E4%BD%93%E3%80%81System.IO%E3%80%81AssetDatabase%E3%80%81Selection%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一般当游戏规模开始大时，为了制作游戏后期的维护性，就可以考虑做资源管理和编辑器扩展了。一是可以集成一些制作流程，省去一些重复操作的步骤，二是更方便项目数据的规范和管理性。今天来分享一下如何在unity中做编辑器窗口的拓展，并实现一些简单的功能。例如根据模板自动创建脚本（System.IO）、创建预制体(AssetDatabase)、读取指定文件夹下的资源、根据鼠标选中的资源批量创建ScriptableObject等（Selection）。</p><p>实现效果如下图：<br><img src="https://img-blog.csdnimg.cn/d5763d45104a478ba37097529803bcf8.png" alt="在这里插入图片描述"></p><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><p>因为本期所有内容均是在Unity编辑器内的内容，在游戏运行或者打包出来时并不起到作用，因此本期的脚本建议都放在项目Assets/Editor文件夹中，或者使用如下的编辑器宏定义，让打包时不再将这些内容添加到实际的包中。（有些代码只在编辑器模式下有效，打包时会报错）</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br><span class="hljs-comment">//该部分代码只在编辑器模式下生效</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>本期用到了一些Odin的比较方便的特性（Attritube），如果有更进一步的兴趣可以去看看其他教程或者官方文档哦。</p><h2 id="编辑器窗口的拓展"><a href="#编辑器窗口的拓展" class="headerlink" title="编辑器窗口的拓展"></a>编辑器窗口的拓展</h2><p>在Unity内置的GUI中，我们可以使用新建一个脚本类，继承EditorWindow的方法，通过MenuItem的属性表示一个静态方法，实现打开编辑器窗口的效果。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FlowChartEdit</span> : <span class="hljs-title">EditorWindow</span><br>&#123;<br>    <span class="hljs-comment">//菜单栏顶部显示目录</span><br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;FlowChart/FlowChart&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenWindow</span>()</span><br>    &#123;<br>        FlowChartEdit wnd = GetWindow&lt;FlowChartEdit&gt;();<br>        wnd.titleContent = <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;FlowChart&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/655ec709e5684ad48f57cb4be4254bfa.png" alt="在这里插入图片描述"><br>Unity GUI中，如果想要绘制各种属性需要比较繁琐的步骤，Odin插件为我们的编辑器窗口实现了更方便的属性，我们修改类继承自OdinWindow，下面展示一个简单的功能。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">OdinWindowTest</span>:<span class="hljs-title">OdinEditorWindow</span><br>&#123;<br>    [<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;Tools/OdinWindowTest&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ShowWindow</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> window = GetWindow&lt;OdinWindowTest&gt;();<br>        window.Show();<br>    &#125;<br><br>    [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;学生姓名&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> StudentName;<br><br>    [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;英文成绩&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> EnglishScore;<br>    [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;数学成绩&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> MathScore;<br>    [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;美术成绩&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> ArtScore;<br><br>    [<span class="hljs-meta">ReadOnly,LabelText(<span class="hljs-string">&quot;总成绩&quot;</span>)</span>] <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> totalScore;<br><br>    [<span class="hljs-meta">Button(<span class="hljs-string">&quot;计算总成绩&quot;</span>,ButtonSizes.Large,Style =ButtonStyle.Box),</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetTotalScore</span>()</span><br>    &#123;<br>        totalScore = EnglishScore + MathScore + ArtScore;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/f5e3ee8fb90f4a97a6c5256713045f2c.png" alt="在这里插入图片描述"><br>如果想实现左右分栏，左边类似树状结构的窗口。我们也可以继承自OdinMenuEditorWindow，通过重载BuildMenuTree()函数去实现它。下面演示的脚本为，通过在窗口中添加某个文件夹下所有的ScriptableObject。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> Sirenix.OdinInspector.Editor;<br><span class="hljs-keyword">using</span> Sirenix.Utilities.Editor;<br><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> Sirenix.Utilities;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">OdinConfigWindow</span> : <span class="hljs-title">OdinMenuEditorWindow</span><br>&#123;<br>[<span class="hljs-meta">MenuItem(<span class="hljs-string">&quot;Sugarzo/项目配置设置&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenWindow</span>()</span><br>&#123;<br><span class="hljs-keyword">var</span> window = GetWindow&lt;OdinConfigWindow&gt;();<br>window.position = GUIHelper.GetEditorWindowRect().AlignCenter(<span class="hljs-number">720</span>, <span class="hljs-number">720</span>);<br>window.titleContent = <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;项目配置设置&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> OdinMenuTree <span class="hljs-title">BuildMenuTree</span>()</span><br>&#123;<br><span class="hljs-keyword">var</span> tree = <span class="hljs-keyword">new</span> OdinMenuTree();<br><span class="hljs-comment">//这里的第一个参数为窗口名字，第二个参数为指定目录，第三个参数为需要什么类型，第四个参数为是否在家该文件夹下的子文件夹</span><br>tree.AddAllAssetsAtPath(<span class="hljs-string">&quot;项目配置设置&quot;</span>, <span class="hljs-string">&quot;Assets/SugarFrame/Configs&quot;</span>, <span class="hljs-keyword">typeof</span>(ScriptableObject), <span class="hljs-literal">true</span>);<br><span class="hljs-keyword">return</span> tree;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>指定文件下下的内容的ScriptableObject<br><img src="https://img-blog.csdnimg.cn/f658ad67125c484cbb9b52dbc5757fc6.png" alt="在这里插入图片描述"><br>打开编辑器窗口后，可以看到该文件夹下的内容已被显示在Odin窗口中。<br><img src="https://img-blog.csdnimg.cn/ec29ade6eeb843728ead05cd9f13ff80.png" alt="在这里插入图片描述"></p><h2 id="根据模板文件生成脚本"><a href="#根据模板文件生成脚本" class="headerlink" title="根据模板文件生成脚本"></a>根据模板文件生成脚本</h2><p>当我们写好了基类的基本功能，后续扩展功能时只需要继承这个基类。如果我们每次想要新建一个类，都需要新建一个C#类，然后手动修改名字，修改继承关系，写出overrive需要拓展的功能的方法字段，就会比较麻烦。回想一下Unity给我们新建Monobehaviour脚本时，都会默认写好一个基本模板，里面已经有了Start()方法和Update()可以直接写逻辑。这里我们也实现一个根据模板创建cs文件的方法。</p><p>首先我们已经先建立一个txt文件，里面写好我们需要的默认模板（里面的#TTT#是用来替换的，也可以换成其他标识符）<br><img src="https://img-blog.csdnimg.cn/4f492d9dfc4b41549470b7a9f7ed6b29.png" alt="在这里插入图片描述"><br>如何创建一个脚本文件呢，其实借助System.IO功能很简单，大体就是先知道路径，File.Create创建文件<br>，写入字节流就搞定了。以下是核心代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//选择的文件路径，因为是脚本文件，这里需要后缀带有.cs;</span><br><span class="hljs-built_in">string</span> filepath = sfd.file; <br>Debug.Log(<span class="hljs-string">&quot;保存 &quot;</span> + filepath);<br><br><span class="hljs-keyword">var</span> fStream = File.Create(filepath);<br><span class="hljs-comment">//template为已经设计好的string对象，将里面的内容全部写入文件</span><br><span class="hljs-keyword">var</span> bytes = System.Text.Encoding.UTF8.GetBytes(template);<br>fStream.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br><br>fStream.Close();<br></code></pre></td></tr></table></figure><p>我们可以用TextAsset保存文本文件,[FolderPath]特性指定需要的文件夹。修改一下内容就可以直接写入了。这里我们做的扩展一点，可以打开电脑的文件管理文件夹自定义把内容放在什么地方。拿下面的窗口来举例。<br><img src="https://img-blog.csdnimg.cn/3b71eb51d90c4caea2f9b6059ad37e62.png" alt="在这里插入图片描述"><br>当我们按下【CreateScript】按钮后，打开资源管理文件夹：<br><img src="https://img-blog.csdnimg.cn/18a8e90c0ddd419bb347f9752be99976.png" alt="在这里插入图片描述"><br>点击保存后，就可以将Code窗口里的代码保存在选中的路径上了。<br>源码如下，注意当修改了项目资源后，最好使用AssetDatabase.Refresh()将项目刷新一遍</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Sirenix.OdinInspector;<br><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br>[<span class="hljs-meta">CreateAssetMenu(fileName = <span class="hljs-string">&quot;编辑器拓展/状态机设置&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusExtraTool</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> CreateType<br>    &#123; <br>        新建Trigger,<br>        新建Action,<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TextAsset actionScriptText;<br>    <span class="hljs-keyword">public</span> TextAsset triggerScriptText;<br>    [<span class="hljs-meta">Space</span>]<br>    [<span class="hljs-meta">BoxGroup, EnumToggleButtons,HideLabel</span>]<br>    <span class="hljs-keyword">public</span> CreateType createType;<br>    [<span class="hljs-meta">BoxGroup,LabelText(<span class="hljs-string">&quot;脚本名&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> title;<br>    [<span class="hljs-meta">Button,BoxGroup</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateScript</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(createType == CreateType.新建Trigger &amp;&amp; !title.Contains(<span class="hljs-string">&quot;Trigger&quot;</span>))<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;脚本名需要以Trigger为后缀&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (createType == CreateType.新建Action &amp;&amp; !title.Contains(<span class="hljs-string">&quot;Action&quot;</span>))<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;脚本名需要以Action为后缀&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><span class="hljs-comment">//将路径和需要新建的文本传入，打开资源管理文件夹</span><br>        FileManager.SaveScriptFile(title, Code);<br>        <span class="hljs-comment">//重载资源</span><br>        AssetDatabase.Refresh();<br>    &#125;<br><br>    [<span class="hljs-meta">TextArea(20,30),ReadOnly</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Code;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnValidate</span>()</span><br>    &#123;<br>    <span class="hljs-comment">//替换上文提到的#TTT#</span><br>        <span class="hljs-keyword">if</span>(triggerScriptText &amp;&amp; createType == CreateType.新建Trigger)<br>        &#123;<br>            Code = triggerScriptText.ToString().Replace(<span class="hljs-string">&quot;#TTT#&quot;</span>, title);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionScriptText &amp;&amp; createType == CreateType.新建Action)<br>        &#123;<br>            Code = actionScriptText.ToString().Replace(<span class="hljs-string">&quot;#TTT#&quot;</span>, title);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            Code = <span class="hljs-string">&quot;缺少脚本的模板文件&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里的打开文件管理窗口的代码，引入了系统目录的Comdlg32.dll<del>（比较长，没读懂也没事，能用就行</del> </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEngine;<br><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><span class="hljs-keyword">using</span> System.IO;<br><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FileManager</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OpenFile</span>()</span><br>    &#123;<br>        OpenFileDlg ofd = <span class="hljs-keyword">new</span> OpenFileDlg();<br>        ofd.structSize = Marshal.SizeOf(ofd);<br>        ofd.filter = <span class="hljs-string">&quot;txt files\0*.txt\0All Files\0*.*\0\0&quot;</span>;<br>        ofd.file = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[<span class="hljs-number">256</span>]);<br>        ofd.maxFile = ofd.file.Length;<br>        ofd.fileTitle = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[<span class="hljs-number">64</span>]);<br>        ofd.maxFileTitle = ofd.fileTitle.Length;<br>        ofd.initialDir = Application.dataPath; <span class="hljs-comment">//默认路径</span><br>        ofd.title = <span class="hljs-string">&quot;打开文件&quot;</span>;<br>        ofd.defExt = <span class="hljs-string">&quot;txt&quot;</span>;<br>        ofd.flags = <span class="hljs-number">0x00080000</span> | <span class="hljs-number">0x00001000</span> | <span class="hljs-number">0x00000800</span> | <span class="hljs-number">0x00000200</span> | <span class="hljs-number">0x00000008</span>;<br>        <span class="hljs-keyword">if</span> (OpenFileDialog.GetOpenFileName(ofd))<br>        &#123;<br>            <span class="hljs-built_in">string</span> filepath = ofd.file; <span class="hljs-comment">//选择的文件路径;  </span><br>            Debug.Log(<span class="hljs-string">&quot;打开 &quot;</span> + filepath);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveFile</span>()</span><br>    &#123;<br>        SaveFileDlg sfd = <span class="hljs-keyword">new</span> SaveFileDlg();<br>        sfd.structSize = Marshal.SizeOf(sfd);<br>        sfd.filter = <span class="hljs-string">&quot;txt files\0*.txt\0All Files\0*.*\0\0&quot;</span>;<br>        sfd.file = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[<span class="hljs-number">256</span>]);<br>        sfd.maxFile = sfd.file.Length;<br>        sfd.fileTitle = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[<span class="hljs-number">64</span>]);<br>        sfd.maxFileTitle = sfd.fileTitle.Length;<br>        sfd.initialDir = Application.dataPath; <span class="hljs-comment">//默认路径</span><br>        sfd.title = <span class="hljs-string">&quot;保存文件&quot;</span>;<br>        sfd.defExt = <span class="hljs-string">&quot;txt&quot;</span>;<br>        sfd.flags = <span class="hljs-number">0x00080000</span> | <span class="hljs-number">0x00001000</span> | <span class="hljs-number">0x00000800</span> | <span class="hljs-number">0x00000200</span> | <span class="hljs-number">0x00000008</span>;<br>        <span class="hljs-keyword">if</span> (SaveFileDialog.GetSaveFileName(sfd))<br>        &#123;<br>            <span class="hljs-built_in">string</span> filepath = sfd.file; <span class="hljs-comment">//选择的文件路径;</span><br>            Debug.Log(<span class="hljs-string">&quot;保存 &quot;</span> + filepath);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//保存脚本文件</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveScriptFile</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fileTitle,<span class="hljs-built_in">string</span> template,<span class="hljs-built_in">string</span> defaultFolderPath = <span class="hljs-string">&quot;&quot;</span></span>)</span><br>    &#123;<br>        SaveFileDlg sfd = <span class="hljs-keyword">new</span> SaveFileDlg();<br>        sfd.structSize = Marshal.SizeOf(sfd);<br>        sfd.filter = <span class="hljs-string">&quot;cs files\0*.cs\0All Files\0*.*\0\0&quot;</span>;<br>        sfd.file = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[<span class="hljs-number">256</span>]);<br>        sfd.maxFile = sfd.file.Length;<br>        sfd.fileTitle = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[<span class="hljs-number">64</span>]);<br>        sfd.maxFileTitle = sfd.fileTitle.Length;<br>        sfd.initialDir = Application.dataPath; <span class="hljs-comment">//默认路径</span><br>        sfd.title = <span class="hljs-string">&quot;保存文件&quot;</span>;<br>        sfd.defExt = <span class="hljs-string">&quot;txt&quot;</span>;<br>        sfd.flags = <span class="hljs-number">0x00080000</span> | <span class="hljs-number">0x00001000</span> | <span class="hljs-number">0x00000800</span> | <span class="hljs-number">0x00000200</span> | <span class="hljs-number">0x00000008</span>;<br><br>        sfd.file = <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>(fileTitle);<br><br>        <span class="hljs-keyword">if</span> (SaveFileDialog.GetSaveFileName(sfd))<br>        &#123;<br>            <span class="hljs-built_in">string</span> filepath = sfd.file; <span class="hljs-comment">//选择的文件路径;</span><br>            Debug.Log(<span class="hljs-string">&quot;保存 &quot;</span> + filepath);<br><br>            <span class="hljs-keyword">var</span> fStream = File.Create(filepath);<br>            <span class="hljs-keyword">var</span> bytes = System.Text.Encoding.UTF8.GetBytes(template);<br>            fStream.Write(bytes, <span class="hljs-number">0</span>, bytes.Length);<br><br>            fStream.Close();<br>        &#125;<br>        <br>    &#125;<br>&#125;<br><br>[<span class="hljs-meta">StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FileDlog</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> structSize = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> IntPtr dlgOwner = IntPtr.Zero;<br>    <span class="hljs-keyword">public</span> IntPtr instance = IntPtr.Zero;<br>    <span class="hljs-keyword">public</span> String filter = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> String customFilter = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> maxCustFilter = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> filterIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> String file = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> maxFile = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> String fileTitle = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> maxFileTitle = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> String initialDir = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> String title = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> flags = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">short</span> fileOffset = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">short</span> fileExtension = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> String defExt = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> IntPtr custData = IntPtr.Zero;<br>    <span class="hljs-keyword">public</span> IntPtr hook = IntPtr.Zero;<br>    <span class="hljs-keyword">public</span> String templateName = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> IntPtr reservedPtr = IntPtr.Zero;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> reservedInt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> flagsEx = <span class="hljs-number">0</span>;<br>&#125;<br><br>[<span class="hljs-meta">StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">OpenFileDlg</span> : <span class="hljs-title">FileDlog</span><br>&#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">OpenFileDialog</span><br>&#123;<br>    [<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;Comdlg32.dll&quot;</span>, SetLastError = true, ThrowOnUnmappableChar = true, CharSet = CharSet.Auto)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">GetOpenFileName</span>(<span class="hljs-params">[In, Out] OpenFileDlg ofn</span>)</span>;<br>&#125;<br><br>[<span class="hljs-meta">StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SaveFileDlg</span> : <span class="hljs-title">FileDlog</span><br>&#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SaveFileDialog</span><br>&#123;<br>    [<span class="hljs-meta">DllImport(<span class="hljs-string">&quot;Comdlg32.dll&quot;</span>, SetLastError = true, ThrowOnUnmappableChar = true, CharSet = CharSet.Auto)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">GetSaveFileName</span>(<span class="hljs-params">[In, Out] SaveFileDlg ofn</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建预制体和ScriptableObject"><a href="#创建预制体和ScriptableObject" class="headerlink" title="创建预制体和ScriptableObject"></a>创建预制体和ScriptableObject</h2><p>接下来如何创建资源了，一般Unity最常用的资源就是预制体和ScriptableObject了，我们先创建一个基类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> Sirenix.OdinInspector;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IAssetCreator</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Create</span>()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseAssetCreator</span> : <span class="hljs-title">ScriptableObject</span>, <span class="hljs-title">IAssetCreator</span><br>&#123;<br>    [<span class="hljs-meta">FolderPath</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> createPath;<br>    [<span class="hljs-meta">Space</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> createFileName;<br><br>    [<span class="hljs-meta">Button</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Create</span>()</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsEmptyVariable</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.IsNullOrEmpty(createPath) || <span class="hljs-built_in">string</span>.IsNullOrEmpty(createFileName);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>首先是新建预制体，使用PrefabUtility类的API可以保存</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> UnityEngine;<br>[<span class="hljs-meta">CreateAssetMenu(menuName = <span class="hljs-string">&quot;编辑器拓展/PrefabCreator&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PrefabCreator</span> : <span class="hljs-title">BaseAssetCreator</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject prototype;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Create</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (IsEmptyVariable() || prototype == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">var</span> newGo = Instantiate(prototype);<br>        PrefabUtility.SaveAsPrefabAsset(newGo, createPath + <span class="hljs-string">&quot;/&quot;</span>+ createFileName + <span class="hljs-string">&quot;.prefab&quot;</span>);<br>        DestroyImmediate(newGo);<br><br>        AssetDatabase.Refresh();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>ScriptableObject类，可以使用AssetDataBase()，注意结尾都需要AssetDatabase.Refresh()一下。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> UnityEditor;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ScriptableObjectCreatorT</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">BaseAssetCreator</span> <span class="hljs-keyword">where</span> <span class="hljs-title">T</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Create</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (IsEmptyVariable())<br>            <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-keyword">var</span> go = ScriptableObject.CreateInstance&lt;T&gt;();<br><br>        AssetDatabase.CreateAsset(go, createPath + <span class="hljs-string">&quot;/&quot;</span> + createFileName + <span class="hljs-string">&quot;.asset&quot;</span>);<br>        AssetDatabase.SaveAssets();<br>        AssetDatabase.Refresh();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="读取指定目录-鼠标选中下的Assets资源"><a href="#读取指定目录-鼠标选中下的Assets资源" class="headerlink" title="读取指定目录/鼠标选中下的Assets资源"></a>读取指定目录/鼠标选中下的Assets资源</h2><p>项目有时候会遇到需要读取某一目录下所有资源，用于加载一些内容。虽然AssetDatabase.LoadAllAssetsAtPath或者Resources.LoadAll可以实现类似功能，但都没有返回类型数组（或者List）类型的指定泛型版本，这里用一种System.IO遍历+LoadAssetAtPath<T>的方式去实现它。</p><p>例如这里我新建了很多对话，但还没有和目标配置文件同步。<br><img src="https://img-blog.csdnimg.cn/5e3ba47ba40b483c9c6364cf2f749de8.png" alt="在这里插入图片描述"><br>设置好路径，按下按钮，可以看到该文件下文件已被同步<br><img src="https://img-blog.csdnimg.cn/b3e64e8cd3a64df6a387617b83ab48b7.png" alt="在这里插入图片描述"><br>这里的对话状态窗口代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR</span><br>    [<span class="hljs-meta">Header(<span class="hljs-string">&quot;同步配置&quot;</span>)</span>]<br><br>    [<span class="hljs-meta">FolderPath</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> pfbPath;<br>    [<span class="hljs-meta">Button</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadPfb</span>()</span><br>    &#123;<br>        datas.Clear();<br><br>        <span class="hljs-keyword">var</span> dialoguePfbs = FileHelper.GetFiles&lt;DialogueData&gt;(pfbPath);<br>        <br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> pfb <span class="hljs-keyword">in</span> dialoguePfbs)<br>        &#123;<br>            datas.Add(<span class="hljs-keyword">new</span> Data(pfb));<br>        &#125;<br><br>        Debug.Log(<span class="hljs-string">&quot;加载&quot;</span> + datas.Count + <span class="hljs-string">&quot;个对话&quot;</span>);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>FileHelper是我们自己写的方法，代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp">    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-title">List</span>&lt;<span class="hljs-title">T</span>&gt; <span class="hljs-title">GetFiles</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> dir</span>) <span class="hljs-keyword">where</span> T : UnityEngine.Object</span><br>    &#123;<br>        <span class="hljs-built_in">string</span> path = <span class="hljs-built_in">string</span>.Format(dir);<br>        <span class="hljs-keyword">var</span> list = <span class="hljs-keyword">new</span> List&lt;T&gt;();<br>        <span class="hljs-comment">//获取指定路径下面的所有资源文件  </span><br>        <span class="hljs-keyword">if</span> (Directory.Exists(path))<br>        &#123;<br>            DirectoryInfo direction = <span class="hljs-keyword">new</span> DirectoryInfo(path);<br>            FileInfo[] files = direction.GetFiles(<span class="hljs-string">&quot;*&quot;</span>);<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; files.Length; i++)<br>            &#123;<br>                <span class="hljs-comment">//忽略关联文件</span><br>                <span class="hljs-keyword">if</span> (files[i].Name.EndsWith(<span class="hljs-string">&quot;.meta&quot;</span>))<br>                &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> UNITY_EDITOR      </span><br>                <span class="hljs-keyword">var</span> so = AssetDatabase.LoadAssetAtPath&lt;T&gt;(dir + <span class="hljs-string">&quot;/&quot;</span> + files[i].Name);<br>                <span class="hljs-keyword">if</span> (so != <span class="hljs-literal">null</span>)<br>                &#123;<br>                    Debug.Log(<span class="hljs-string">&quot;加载资源&quot;</span> + files[i].Name);<br>                    list.Add(so <span class="hljs-keyword">as</span> T);<br>                &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure><p>除了指定文件夹下的资源外，有时候我们可能需要知道鼠标选中的资源。例如在我们的框架设计中，音效资源被我们封装成了一个ScriptableObject。<br><img src="https://img-blog.csdnimg.cn/d0ff278295c04b48923618aecc9636eb.png" alt="在这里插入图片描述"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AudioSo</span> : <span class="hljs-title">ScriptableObject</span><br> &#123;<br>     [<span class="hljs-meta">TextArea, LabelText(<span class="hljs-string">&quot;注释&quot;</span>)</span>]<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> text;<br><br>     <span class="hljs-keyword">public</span> AudioClip audioData;<br>     [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;音轨选择&quot;</span>)</span>]<br>     <span class="hljs-keyword">public</span> AudioMixerGroup outputGroup;<br><br>     [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;音频相对音量&quot;</span>), Range(0, 1)</span>]<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> volume = <span class="hljs-number">0.5f</span>;<br><br>     [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;是否循环播放&quot;</span>)</span>]<br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> loop;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-built_in">string</span> <span class="hljs-title">ToString</span>()</span><br>     &#123;<br>         <span class="hljs-keyword">return</span> name;<br>     &#125;<br><br> &#125;<br></code></pre></td></tr></table></figure><p>但是有时候，如果导入了一批新的音效（AudioClip，或者说是mp3格式）需要添加进项目中，一个个新建ScrpitableObject手动设置肯定是很麻烦的，使用文件夹配置好像也不太方便，这时候最好是可以鼠标选中一批clip，然后根据选中的资源来生成对于的文件，此时Selection.assetGUIDs就可以派上用场了，它可以知道我们选中的文件在项目中的目录位置，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">Button(<span class="hljs-string">&quot;选择音效资源然后创建&quot;</span>)</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateAudioSo</span>()</span><br>    &#123;<br>    <span class="hljs-comment">//验证路径</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(audioSoPath))<br>            <span class="hljs-keyword">return</span>;<br><br>        <span class="hljs-comment">//选择音效资源然后点击创建</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> guiD <span class="hljs-keyword">in</span> Selection.assetGUIDs)<br>        &#123;<br>            <span class="hljs-keyword">var</span> path = AssetDatabase.GUIDToAssetPath(guiD);<br>            <span class="hljs-keyword">var</span> audioClip = AssetDatabase.LoadAssetAtPath&lt;AudioClip&gt;(path);<br>            <span class="hljs-keyword">if</span> (audioClip != <span class="hljs-literal">null</span>)<br>            &#123;<br>            <span class="hljs-comment">//同步文件并保存</span><br>                <span class="hljs-keyword">var</span> so = ScriptableObject.CreateInstance&lt;AudioSo&gt;();<br>                so.name = <span class="hljs-string">&quot;AudioSo-&quot;</span> + audioClip.name;<br>                so.audioData = audioClip;<br><br>                AssetDatabase.CreateAsset(so, audioSoPath + <span class="hljs-string">&quot;/&quot;</span> + so.name + <span class="hljs-string">&quot;.asset&quot;</span>);<br>                AssetDatabase.SaveAssets();<br>                AssetDatabase.Refresh();<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>想起这个月的面试，面试官问我：你的项目有用到什么技术亮点嘛介绍一下。回想自己好像真没写什么特别难的技术，自己做游戏吧说到底好像就是造轮子，然后搭完框架就拼图，写一些简单的算法啥的。</p><p>实际上写项目印象最深的就是初期写各个系统的时候吧。一是如何思考如何组织各个系统，就像软件工程的一大目标：高内聚低耦合，中间就要用到各种各样的设计模式。二是造出各种各样的工具，遇到重复的操作时想办法把这段逻辑抽象出来，然后复用，也是规范程序格式。（关于工具，最近在学习unity UIBuilder和Graphview，想自己造一个可视化节点的事件触发器）。其实框架设计思想，最终目的都是为了方便项目的进一步扩展，优化制作流程管线（毕竟如果只是写技术demo或者只是几天的gamejam比赛，肯定不会写那么复杂啦）</p><p><del>应该还是会有下期吧（大概）</del>文章里提到了很多系统（对话excel同步啊，音频，窗口管理啊）也可以拆开讲讲，不过都比较简单了，下次一定！</p>]]></content>
    
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>unity框架设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE 在虚幻中使用动画序列和分层骨骼混合简单实现角色看向</title>
    <link href="/2022/08/23/%5BUE%5D%20%E5%9C%A8%E8%99%9A%E5%B9%BB%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8A%A8%E7%94%BB%E5%BA%8F%E5%88%97%E5%92%8C%E5%88%86%E5%B1%82%E9%AA%A8%E9%AA%BC%E6%B7%B7%E5%90%88%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%A7%92%E8%89%B2%E7%9C%8B%E5%90%91_Sugarzo%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/08/23/%5BUE%5D%20%E5%9C%A8%E8%99%9A%E5%B9%BB%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%8A%A8%E7%94%BB%E5%BA%8F%E5%88%97%E5%92%8C%E5%88%86%E5%B1%82%E9%AA%A8%E9%AA%BC%E6%B7%B7%E5%90%88%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E8%A7%92%E8%89%B2%E7%9C%8B%E5%90%91_Sugarzo%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>做ueDemo骨骼动画作业时想到的功能，记录一下。实现效果如下：角色会看向摄像机方向。ＮＰＣ会看向玩家方向。本期动画素材使用了ｕｅ商店中的AdvancedLocomotionSystemV。</p><p><img src="https://img-blog.csdnimg.cn/da41e7fe016f474291cc2d97ac2f259a.png"></p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title=" 实现步骤"></a> 实现步骤</h1><p>首先实现了身体部分的正常的动画状态机：包括站立，走路，下蹲，跳跃等。</p><p><img src="https://img-blog.csdnimg.cn/74b5b6980128489c84b5bc86cbef7a85.png"></p><p>因为角色头部转向是与身体运动分开的。所以需要再新建一个动画状态，专门用来处理头部转向，并使用骨骼分层混合将他们合并起来。在设置混合指定骨骼时，选中对应的骨骼（这里是“Ｈｅａｄ”），并设置对应的权重。</p><p><img src="https://img-blog.csdnimg.cn/211ddad459ce44be8af2edb801bd6395.png"></p><p>观察素材中给的人物转头动画。实际上是一个ａｄｄｉｔｉｖｅ的动画序列（３０帧１秒），动画播放位置的不同（ｆｌｏａｔ数值０到１）对应了人物从左向右看。那么我们只需要计算出对应的目标与自身角色的夹角，并将夹角大小映射为浮点型［０，１］的数值范围即可。</p><p><img src="https://img-blog.csdnimg.cn/13f9161e4ae24e6394ff257022a1e61c.png">         <img src="https://img-blog.csdnimg.cn/635e1f9c1375460784c9e316d2b7ce54.png">        如何使用浮点数量化两个夹角大小呢？容易想到使用使用两个单位向量的点乘判断大小。我们。因为等于１时对应动画位置是向右看，点乘两个重叠的单位向量大小也正好为１，所以我们只需取角色的局部右方向对目标方向进行点乘即可。</p><p><img src="https://img-blog.csdnimg.cn/c476a82d12614a5ca3f81fcf51a987e6.png"></p><p>新建一个C++组件,搭载到角色Actor上,负责计算自己与需要看向目标的方向夹角,lookAtPoint为需要播放的动画位置点(float数值0-1对应看向的左到右,0.5时代表玩家看向自己的正前方)</p><p>使用transform.right（即actor-&gt;GetActorLocation()）与角色看的方向的单位向量的点乘判断夹角来赋值给动画.如果点乘结果更接近1,说明角色更看向右边,对应的动画序列位置为1.点乘结果更接近-1,说明角色更看向左边,对应的动画序列位置为0.得到关系: 动画序列位置 = (点乘结果 + 1) * 0.5f</p><p>同时,使用transform.forward,判断目标是否在角色前面.如果与方向向量点乘结果&lt;0,说明目标在角色后面,则角色不需要进行看向操作(动画序列位置为0.5)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> SKEPROJECT_API UMyAnimCompoment : public UActorComponent<br>&#123;<br>public:        <br>        <span class="hljs-constructor">UPROPERTY(EditAnywhere, BlueprintReadWrite)</span><br>                <span class="hljs-built_in">float</span> lookAtPoint; <span class="hljs-comment">//暴露给动画蓝图进行编辑</span><br>        <span class="hljs-constructor">UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = <span class="hljs-string">&quot;Follow Target&quot;</span>)</span><br>                AActor* target;    <span class="hljs-comment">//需要看向的目标</span><br>        <span class="hljs-constructor">UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = <span class="hljs-string">&quot;Follow Target&quot;</span>)</span><br>                <span class="hljs-built_in">bool</span> targetIsPlayer;<br>        <span class="hljs-constructor">UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = <span class="hljs-string">&quot;Follow Target&quot;</span>)</span><br>                <span class="hljs-built_in">bool</span> targetIsCamera;<br><br>protected:<br>        <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">BeginPlay()</span> override;<br>        UActorComponent* cylinderCollider;<br>&#125;<br>void UMyAnimCompoment::<span class="hljs-constructor">TickComponent(<span class="hljs-params">float</span> DeltaTime, ELevelTick TickType, FActorComponentTickFunction<span class="hljs-operator">*</span> ThisTickFunction)</span><br>&#123;<br>        Super::<span class="hljs-constructor">TickComponent(DeltaTime, TickType, ThisTickFunction)</span>;<br><br>        <span class="hljs-keyword">if</span> (target<span class="hljs-operator"> == </span>nullptr)<br>        &#123;<br>                GLog-&gt;<span class="hljs-constructor">Log(<span class="hljs-string">&quot;target Not Set&quot;</span>)</span>;<br>                return;<br>        &#125;<br><br>        <span class="hljs-comment">//得到角色的胶囊碰撞体</span><br>        UPrimitiveComponent* collider = <span class="hljs-constructor">GetOwner()</span>-&gt;FindComponentByClass&lt;UPrimitiveComponent&gt;<span class="hljs-literal">()</span>; <span class="hljs-comment">//得到自己的胶囊碰撞体</span><br>        <br>        FVector selfpos = collider-&gt;<span class="hljs-constructor">GetComponentLocation()</span>; <span class="hljs-comment">//得到自己的位置</span><br>        FVector tarPos = target-&gt;<span class="hljs-constructor">GetActorLocation()</span>;        <span class="hljs-comment">//得到目标的位置</span><br>        FVector direction = (tarPos - selfpos).<span class="hljs-constructor">GetSafeNormal()</span>; <span class="hljs-comment">//得到自己到目标方向的单位向量</span><br><br>        <span class="hljs-comment">//使用局部右方向，使用点乘判断自己与目标方向的夹角，返回[-1,1]</span><br>        <span class="hljs-comment">//这里的局部右方向要用GetForwardVector()??可能和原本组件自带的旋转有关</span><br>        <span class="hljs-built_in">float</span> dir = FVector::<span class="hljs-constructor">DotProduct(-<span class="hljs-params">collider</span>-&gt;GetForwardVector()</span>, direction);<br>        <span class="hljs-comment">//将点乘[-1,1]的结果映射回动画播放中需要用到的[0,1]的范围</span><br>        dir = (dir + <span class="hljs-number">1</span>)<span class="hljs-operator"> * </span><span class="hljs-number">0.5</span>f; <br>        <br>        <span class="hljs-comment">//判断目标是否在角色前,如果目标在角色后面就不需要角色看向了</span><br>        <span class="hljs-built_in">bool</span> isForward = (FVector::<span class="hljs-constructor">DotProduct(<span class="hljs-params">collider</span>-&gt;GetRightVector()</span>, direction) &gt; <span class="hljs-number">0</span>); <br><br>        <span class="hljs-comment">//得到动画混合结果（0为最左，0.5为中间，1为最右）</span><br>        lookAtPoint = isForward ? dir : <span class="hljs-number">0.5</span>f; <br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ue4</tag>
      
      <tag>骨骼动画</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 状态机事件流程框架 (二) 设计游戏状态的保存框架，存档功能 ScriptableObject、EasySave</title>
    <link href="/2022/08/12/Unity%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/08/12/Unity%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/m0_51776409/article/details/124854564" title="前文 ： ​​​​​​​​​​​​​​[Unity] 状态机事件流程框架 (一)">前文 ： ​​​​​​​[Unity] 状态机事件流程框架 (一)</a></p><p>本期来设计一个游戏状态的怎么在游戏中表示和存储。保存游戏状态的目的一是方便根据玩家当前的游戏进度实行各种各样的逻辑分支，二是在存档时能记录实时的游戏数据，方便读档回到存档位置。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>实现的效果图如下（图为作者参与过项目展示，图一的例子为游戏流程-序章剧情中某一处需要触发摄像机引导的Trigger配置，图二为在框架中自定义游戏状态表示，并可以使用一个Trigger去访问它。其中编辑器窗体由Odin制作，不在本期讨论范围）</p><p><img src="https://img-blog.csdnimg.cn/7ce6efe3972347bb8e99188ff848d372.png"></p><p><img src="https://img-blog.csdnimg.cn/17de83d7fe874e29b7f375823b1b9436.png"></p><p>最后所有的状态都能被写入磁盘（EasySave实现）</p><p> <img src="https://img-blog.csdnimg.cn/5b217bc8d0c74717bb8ae7c456effa5b.png"></p><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><h2 id="如何在游戏中存储状态："><a href="#如何在游戏中存储状态：" class="headerlink" title="如何在游戏中存储状态："></a>如何在游戏中存储状态：</h2><p>一般来说，我们会使用unity中ScriptableObject来表示游戏中一些数据，方便我们在游戏编辑器下的编辑，但使用ScriptableObject时需要搞清楚几个概念。首先分享一个在M_Studio中背包系统视频下的一条评论：</p><p><img src="https://img-blog.csdnimg.cn/216cf9eea6ca4fb9b8fb05000e808cf0.png"></p><p>总结就是：游戏中的数据分为<strong>持久化数据</strong>和<strong>非持久化数据</strong>。比如一个物品可能由A、B、C三种状态，这里的<strong>物品</strong>和<strong>状态列表</strong>就可以使用一个ScriptableObject进行存储（即非持久化数据，使用List可进行存储）。当游戏开始运行时，某一刻该物品的状态是B，此时我们要读取状态做判断或者存档操作时，我们不需要知道该物品是否有其他状态（A、C），只需要知道【物品状态-&gt;B】的关系就可以了。这个就是需要持久化数据，这种一一对应的关系比较适合用字典方式来实现它。</p><p>因此，我们将游戏状态需要的数据分离成可持久化和非持久化，并需要将它们表示在不同的脚本位置。</p><p>非持久化数据：状态名（String），拥有的状态列表（List<String>），应放在ScriptableObject中</p><p>持久化数据：状态名，当前状态（Dictionary&lt;string,string&gt;），应放在MonoBehaviour脚本上。该脚本一般是拥有单例模式的管理类。</p><p>我们先表示以下怎么使用状态的ScriptableObject表示。这里的ValueDropID和ValueDropValue方法主要提供给是在Trigger使用下拉菜单。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs csharp"> <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusCheck</span>&lt;<span class="hljs-title">TKey</span>,<span class="hljs-title">TValue</span>&gt;<br>&#123;<br>    <span class="hljs-function">List&lt;TKey&gt; <span class="hljs-title">SelectID</span>()</span>;<br>    <span class="hljs-function">List&lt;TValue&gt; <span class="hljs-title">SelectValue</span>(<span class="hljs-params">TKey ID</span>)</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusData</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        key = <span class="hljs-keyword">this</span>.GetType().ToString() + <span class="hljs-string">&quot;-&quot;</span> + name;<br>    &#125;<br>    [<span class="hljs-meta">Header(<span class="hljs-string">&quot;请保证key值唯一&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> key;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> id</span>)</span>;<br>&#125;<br><br><span class="hljs-comment">//实现范式版本</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusData</span>&lt;<span class="hljs-title">TKey</span>, <span class="hljs-title">TValue</span>&gt; : <span class="hljs-title">StatusData</span>, <span class="hljs-title">IStatusCheck</span>&lt;<span class="hljs-title">TKey</span>, <span class="hljs-title">TValue</span>&gt;<br>&#123;<br>    [<span class="hljs-meta">Header(<span class="hljs-string">&quot;备注&quot;</span>),TextArea</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> content;<br><br>    [<span class="hljs-meta">Space</span>]<br>    <span class="hljs-keyword">public</span> List&lt;Data&gt; datas;<br><br>    [<span class="hljs-meta">Serializable</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Data</span><br>    &#123;<br>        <span class="hljs-keyword">public</span> TKey ID;<br>        <span class="hljs-keyword">public</span> List&lt;TValue&gt; Values;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>    &#123;<br>        List&lt;<span class="hljs-built_in">string</span>&gt; retList = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> id <span class="hljs-keyword">in</span> datas)<br>        &#123;<br>            retList.Add(id.ID.ToString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> retList;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> id</span>)</span><br>    &#123;<br>        List&lt;<span class="hljs-built_in">string</span>&gt; retList = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">string</span>&gt;();<br><br>        <span class="hljs-keyword">var</span> selectData = datas.Find(x =&gt; x.ID.ToString() == id.ToString());<br>        <span class="hljs-keyword">if</span> (selectData != <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> str <span class="hljs-keyword">in</span> selectData.Values)<br>                retList.Add(str.ToString());<br>        &#125;<br>            <br><br>        <span class="hljs-keyword">return</span> retList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里具体实现游戏状态，使用 StatusData&lt;string, string&gt;进行派生就好啦。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[CreateAssetMenu(menuName = &quot;新建状态/游戏状态&quot;)]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">GameStatusData</span> : <span class="hljs-symbol">StatusData</span>&lt;<span class="hljs-symbol">string, <span class="hljs-symbol">string</span></span>&gt;<br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>随后我们设置对应的Trigger，使用它的下拉方法ValueDropID()和ValueDropValue()</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">System.Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Status</span><br>&#123;<br>    <span class="hljs-keyword">public</span> StatusData config;<br><br>    [<span class="hljs-meta">ValueDropdown(nameof(ValueDropID))</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> id;<br>    [<span class="hljs-meta">ValueDropdown(nameof(ValueDropValue))</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (config)<br>            <span class="hljs-keyword">return</span> config.ValueDropID();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (config)<br>            <span class="hljs-keyword">return</span> config.ValueDropValue(id);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;条件为真/假&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isTrue = <span class="hljs-literal">true</span>;<br>&#125;<br><br>[<span class="hljs-meta">AddComponentMenu(<span class="hljs-string">&quot;Sugarzo触发器/游戏状态触发器&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br>    <span class="hljs-comment">//还有很多其他设置先省略</span><br>&#125;<br></code></pre></td></tr></table></figure><p>现在看看我们写好的效果：</p><p><img src="https://img-blog.csdnimg.cn/1db4a22ae9824a178ff61c2f1e0619ab.png"></p><p><img src="https://img-blog.csdnimg.cn/d0333bcdb26a47bf8c52c70505a311c7.png"><br>嗯嗯，看起来程序运行的十分顺利（？），我们已经正确能在Trigger看到写好的状态并选择他们。很明显，ScriptableObject的数据只存在编辑器中。我们现在的状态数据还没有被装进游戏中。现在应该添加一个MonoBehaviour的管理类脚本，去管理游戏中实时数据了。</p><p>作为一个管理类，应该实现什么功能呢？首先应该是一个单例，随后要有<strong>设置数据/检查数据</strong>的方法，然后是<strong>保存数据/读取数据</strong>的方法，我们先把接口写出来：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusSave</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LoadData</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IStatusCheck</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsStatus</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> _data, <span class="hljs-built_in">string</span> _id, <span class="hljs-built_in">string</span> _value</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetStatus</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> _data, <span class="hljs-built_in">string</span> _id, <span class="hljs-built_in">string</span> _value</span>)</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这里的方法IsStatus用了三个参数的版本。id/value自然是标记状态名和具体状态的。data主要是表示该状态位于哪一个ScriptableObject中的数据（这里用了前文中的StatusData.Key）</p><p>接着我们注册一个静态类存储一些静态方法，方便我们的Trigger调用：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static <span class="hljs-keyword">class</span> StatusManager<br>&#123;<br>    <span class="hljs-comment">//存储IStatusCheck的实例</span><br>    public static Dictionary&lt;Type,IStatusCheck&gt; managerInstances = <span class="hljs-keyword">new</span> Dictionary&lt;Type, IStatusCheck&gt;<span class="hljs-literal">()</span>;<br><br>    public static <span class="hljs-built_in">bool</span> <span class="hljs-constructor">IsStatus(StatusData <span class="hljs-params">data</span>, <span class="hljs-params">string</span> ID, <span class="hljs-params">string</span> <span class="hljs-params">value</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (managerInstances.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">data</span>.GetType()</span>))<br>            return managerInstances<span class="hljs-literal">[<span class="hljs-identifier">data</span>.G<span class="hljs-identifier">etType</span>()]</span>.<span class="hljs-constructor">IsStatus(<span class="hljs-params">data</span>.<span class="hljs-params">key</span>, ID, <span class="hljs-params">value</span>)</span>;<br><br>        Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">data</span>.<span class="hljs-params">name</span> + <span class="hljs-string">&quot; 的管理类实例&quot;</span>)</span>;<br>        return <span class="hljs-literal">false</span>;<br>    &#125;<br>    public static void <span class="hljs-constructor">SetStatus(StatusData <span class="hljs-params">data</span>, <span class="hljs-params">string</span> ID, <span class="hljs-params">string</span> <span class="hljs-params">value</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (managerInstances.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">data</span>.GetType()</span>))<br>        &#123;<br>            Debug.<span class="hljs-constructor">Log(<span class="hljs-string">&quot;切换游戏状态 &quot;</span> + ID + <span class="hljs-string">&quot; -&gt; &quot;</span> + <span class="hljs-params">value</span>)</span>;<br>            managerInstances<span class="hljs-literal">[<span class="hljs-identifier">data</span>.G<span class="hljs-identifier">etType</span>()]</span>.<span class="hljs-constructor">SetStatus(<span class="hljs-params">data</span>.<span class="hljs-params">key</span>, ID, <span class="hljs-params">value</span>)</span>;<br>            EventManager.<span class="hljs-constructor">EmitEvent(EventEnum.GameStatusChange.ToString()</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到设置状态时发送了EventManager.EmitEvent(EventEnum.GameStatusChange.ToString());该事件需要由所有<strong>状态Trigger</strong>监听，意思时修改完状态时，通过发送信号所有Trigger都会检查当前状态是否满足条件，如果满足就执行Action。</p><p>我们回到StatusTrigger实现完其余功能：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">AddComponentMenu(<span class="hljs-string">&quot;Sugarzo触发器/游戏状态触发器&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (IsState())<br>            <span class="hljs-keyword">base</span>.Execute();<br>    &#125;<br>    <span class="hljs-comment">//会在Enable中运行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RegisterSaveTypeEvent</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.RegisterSaveTypeEvent();<br>        <br>        <span class="hljs-keyword">if</span>(status.Count &gt; <span class="hljs-number">0</span>)<br>            EventManager.StartListening(EventEnum.GameStatusChange.ToString(), Execute);<br>    &#125;<br>    <span class="hljs-comment">//会在DisEnable中运行</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteSaveTypeEvent</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.DeleteSaveTypeEvent();<br><br>        EventManager.StopListening(EventEnum.GameStatusChange.ToString(), Execute);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsState</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> statu <span class="hljs-keyword">in</span> status)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (StatusManager.IsStatus(statu.config,statu.id,statu.<span class="hljs-keyword">value</span>) != statu.isTrue)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的修改状态的Action：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatusAction</span> : <span class="hljs-title">BaseAction</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;设置游戏状态&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> List&lt;Status&gt; status = <span class="hljs-keyword">new</span> List&lt;Status&gt;();<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunningLogic</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">foreach</span>(<span class="hljs-keyword">var</span> sta <span class="hljs-keyword">in</span> status)<br>            &#123;<br>                StatusManager.SetStatus(sta.config, sta.id, sta.<span class="hljs-keyword">value</span>);<br>            &#125;<br><br>            RunOver();<br>        &#125;<br><br>        [<span class="hljs-meta">System.Serializable</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Status</span><br>        &#123;<br>            <span class="hljs-keyword">public</span> StatusData config;<br><br>            [<span class="hljs-meta">ValueDropdown(nameof(ValueDropID))</span>]<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> id;<br>            [<span class="hljs-meta">ValueDropdown(nameof(ValueDropValue))</span>]<br>            <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-keyword">value</span>;<br><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropID</span>()</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (config)<br>                    <span class="hljs-keyword">return</span> config.ValueDropID();<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;<span class="hljs-built_in">string</span>&gt; <span class="hljs-title">ValueDropValue</span>()</span><br>            &#123;<br>                <span class="hljs-keyword">if</span> (config)<br>                    <span class="hljs-keyword">return</span> config.ValueDropValue(id);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>接着我们就可以写具体实现了接口IStatusSave和IStatusCheckStatusManager的管理类实例了。为了方便扩展这里使用了三个泛型参数。TData被StatusData约束，&lt;TKey, TValue&gt;对应的也是StatusData的数据类型。</p><p>在管理类中，我们需要维护两个东西，一个是需要配置在游戏中的数据List<TData> configs，另一个则是实时数据存储的字典了：Dictionary&lt;string, Dictionary&lt;string, string&gt;&gt; configData，我们实时存档的数据都存储在字典中，设置检查状态，读档和存档的操作也是在操作这个类型。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> StatusManager&lt;TData,TKey, TValue&gt; : MonoBehaviour,IStatusSave, IStatusCheck where TData : StatusData&lt;TKey, TValue&gt;<br>    &#123;<br><br>        public <span class="hljs-keyword">virtual</span> <span class="hljs-built_in">bool</span> <span class="hljs-constructor">IsStatus(<span class="hljs-params">string</span> <span class="hljs-params">_data</span>, <span class="hljs-params">string</span> <span class="hljs-params">_id</span>, <span class="hljs-params">string</span> <span class="hljs-params">_value</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(configData.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_data</span>)</span>)<br>                <span class="hljs-keyword">if</span> (configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span>.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_id</span>)</span>)<br>                    return configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">_id</span>]</span>.<span class="hljs-constructor">Equals(<span class="hljs-params">_value</span>)</span>;<br><br>            Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        public <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">SetStatus(<span class="hljs-params">string</span> <span class="hljs-params">_data</span>, <span class="hljs-params">string</span> <span class="hljs-params">_id</span>, <span class="hljs-params">string</span> <span class="hljs-params">_value</span>)</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (configData.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_data</span>)</span>)<br>                <span class="hljs-keyword">if</span> (configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span>.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_id</span>)</span>)<br>                &#123;<br>                    configData<span class="hljs-literal">[<span class="hljs-identifier">_data</span>]</span><span class="hljs-literal">[<span class="hljs-identifier">_id</span>]</span> = _value;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br>            <span class="hljs-keyword">else</span><br>                Debug.<span class="hljs-constructor">LogError(<span class="hljs-string">&quot;找不到关于 &quot;</span> + <span class="hljs-params">_id</span> + <span class="hljs-string">&quot; 的数据类型&quot;</span>)</span>;<br><br>            return;<br>        &#125;<br><br>        public List&lt;TData&gt; configs;<br>        protected Dictionary&lt;<span class="hljs-built_in">string</span>, Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;&gt; configData;<br><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">Awake()</span><br>        &#123;<br>            <span class="hljs-constructor">InitData()</span>;<br>            <span class="hljs-constructor">RegisterStatic()</span>; <br>            <span class="hljs-constructor">RegisterSave()</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//初始化字典数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">InitData()</span><br>        &#123;<br>            configData = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">string</span>&gt;&gt;<span class="hljs-literal">()</span>;<br>            foreach(var config <span class="hljs-keyword">in</span> configs)<br>            &#123;<br>                configData.<span class="hljs-constructor">Add(<span class="hljs-params">config</span>.<span class="hljs-params">key</span>, <span class="hljs-params">new</span> Dictionary&lt;<span class="hljs-params">string</span>, <span class="hljs-params">string</span>&gt;()</span>);<br>                foreach(var cData <span class="hljs-keyword">in</span> config.datas)<br>                &#123;<br>                    configData<span class="hljs-literal">[<span class="hljs-identifier">config</span>.<span class="hljs-identifier">key</span>]</span>.<span class="hljs-constructor">Add(<span class="hljs-params">cData</span>.ID.ToString()</span>, <span class="hljs-built_in">string</span>.Empty);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//注册静态数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">RegisterStatic()</span><br>        &#123;<br>            <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StatusManager</span>.</span></span>managerInstances.<span class="hljs-constructor">Add(<span class="hljs-params">typeof</span>(TData)</span>, this);<br>        &#125;<br>        <span class="hljs-comment">//注册存档事件监听数据</span><br>        protected <span class="hljs-keyword">virtual</span> void <span class="hljs-constructor">RegisterSave()</span><br>        &#123;<br>            EventManager.<span class="hljs-constructor">StartListening(EventEnum.GameSave.ToString()</span>, SaveData);<br>            EventManager.<span class="hljs-constructor">StartListening(EventEnum.GameLoad.ToString()</span>, LoadData);<br>        &#125;<br><br><br>        public void <span class="hljs-constructor">LoadData()</span><br>        &#123;<br>            GameSaveManager.<span class="hljs-constructor">LoadData(<span class="hljs-params">this</span>.GetType()</span>.<span class="hljs-constructor">ToString()</span>, out configData);<br>        &#125;<br><br>        public void <span class="hljs-constructor">SaveData()</span><br>        &#123;<br>            GameSaveManager.<span class="hljs-constructor">SaveData(<span class="hljs-params">this</span>.GetType()</span>.<span class="hljs-constructor">ToString()</span>, configData);<br>        &#125;<br><br>        <span class="hljs-literal">[S<span class="hljs-identifier">irenix</span>.O<span class="hljs-identifier">dinInspector</span>.B<span class="hljs-identifier">utton</span>]</span><br>        public void <span class="hljs-constructor">DebugAllStatus()</span><br>        &#123;<br>            foreach (var data <span class="hljs-keyword">in</span> configData)<br>            &#123;<br>                foreach (var cData <span class="hljs-keyword">in</span> data.Value)<br>                &#123;<br>                    Debug.<span class="hljs-constructor">Log(<span class="hljs-params">cData</span>.Key + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-params">cData</span>.Value)</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用这个范式基类派生出我们真正需要的GameStatusManager实例：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">GameStatusManager</span> : <span class="hljs-symbol">StatusManager</span>&lt;<span class="hljs-symbol">GameStatusData,<span class="hljs-symbol">string</span>,<span class="hljs-symbol">string</span></span>&gt;<br>    &#123;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>接着是存档框架，这里使用了ES3.Save和ES3.Load，通过SaveData<T>(string saveKey,T data)的函数签名，可以很方便的存储游戏数据。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameSaveManager</span> : <span class="hljs-title">SingletonMono</span>&lt;<span class="hljs-title">GameSaveManager</span>&gt;<br>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> slotKey = <span class="hljs-string">&quot;Save0&quot;</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">base</span>.Awake();<br>        GameSaveInstance = <span class="hljs-keyword">new</span> GameSave();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameSave <span class="hljs-title">GetGameSave</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Instance.GameSaveInstance;<br>    &#125;<br><br>    [<span class="hljs-meta">Button,ButtonGroup</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveGameToSlot</span>()</span><br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;存储卡槽存档 &quot;</span> + Instance.slotKey);<br><br>        EventManager.EmitEvent(EventEnum.GameSave.ToString());<br>        GetGameSave().slotKey = Instance.slotKey;<br><br>    &#125;<br>    [<span class="hljs-meta">Button, ButtonGroup</span>]<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadGameFromSlot</span>()</span><br>    &#123;<br>        Debug.Log(<span class="hljs-string">&quot;读取卡槽存档 &quot;</span> + Instance.slotKey);<br><br>        EventManager.EmitEvent(EventEnum.GameLoad.ToString());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> saveKey,T data</span>)</span><br>    &#123;<br>        Debug.Log(saveKey + <span class="hljs-string">&quot; 保存&quot;</span>);<br>        ES3.Save(Instance.slotKey + <span class="hljs-string">&quot;@&quot;</span> + saveKey,data);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadData</span>&lt;<span class="hljs-title">T</span>&gt;(<span class="hljs-params"><span class="hljs-built_in">string</span> saveKey,<span class="hljs-keyword">out</span> T data</span>)</span><br>    &#123;<br>        Debug.Log(saveKey + <span class="hljs-string">&quot; 读取&quot;</span>);<br>        data = (T)ES3.Load(Instance.slotKey + <span class="hljs-string">&quot;@&quot;</span> + saveKey);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好了这里的框架就分析了。虽然感觉是有点乱（？）把这一部分的源码上传到了github，有兴趣的可以参考参考，框架内已内置Odin和EasySave3插件。有问题欢迎讨论<a href="https://github.com/sugarzo/UnityFrame" title="GitHub - sugarzo/UnityFrame: 一些unity框架，目前只做到了Trigger/Action/状态表示系统">GitHub - sugarzo/UnityFrame: 一些unity框架，目前只做到了Trigger/Action/状态表示系统</a></p><p>后面可能还会有几篇文档，可能会讲讲unity的编辑器拓展，动态管理窗口配置啥的。（下次一定）</p>]]></content>
    
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>unity框架设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity C#使用委托事件与字典实现unity消息中心（观察者模式）</title>
    <link href="/2022/08/03/1664551378190/"/>
    <url>/2022/08/03/1664551378190/</url>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>最近在学习ue的gameplay框架设计和设计模式，再回过头看一下自己过去一年写的unity项目框架（屎山）代码，感慨良多。体会到了做游戏写脚本，语言语法只是表层功夫，学会它可以让游戏跑起来。走多远的关键，还是在数据结构/算法/设计模式的内功。</p><p>过去一年，自己也看了很多unity教程，国内unity开发社区还是挺活跃的，新手阶段能在网上找到各种各样的教程。但学会教程≠会做项目，实践才是检验真理的第一出路。我记得刚学unity时去自己参加游戏比赛，是一个简单的横板解密游戏，策划案中会用到物品、对话系统、角色控制。当时自己先去看了b站MStudioM的视频，学习了各个怎么实现背包系统，对话系统，2D中的角色移动啊，看完后感觉：嗯我会了，就是新建UI组件，调用以下API嘛。等做起来的时候傻眼了。游戏剧情文案策划直接发了几千字过来，还需要根据demo情况频繁更新添加。一些背包物品可能今天只有使用功能，明天就要实现拖拽，双击功能。</p><p>在设计过程中遇见了需要组件中间互相通信更加情况麻烦：比如对话开始时暂停玩家移动，玩家移动需要播放脚步声。当时年轻的自己（好吧其实现在也是菜鸡）直接在对应的脚本中调用单例引用。比如在DialogueManager中对话开始调用PlayerControl.Instance.StopMove。PlayerControl中调用AudioManager.Instance.Play(脚本声)。这样写确实可以实现功能，游戏也做完了然后提交了比赛。但等自己写完回头看框架，各个类的调用关系几乎变成了蜘蛛网。写好的单个功能根本无法沿用到下一个项目中，因为只需要删除其中一个类，所有系统都会缺少引用报错。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ac49dfc3d21a662dd780b504b0617125.jpeg"></p><p>回过头来看这种情况时，问题在于项目中各个系统发生了耦合。其实写成这样背后的原因是，很多教程更聚焦于如何实现一个功能，但很少去这教些系统应该如何组织起来，怎么放在合适的地方方便维护。当实现的系统一多便会发生嵌套。写完一个项目，发现每个脚本都到处引用，很难从其中单独分离出某个功能。良好的框架每个组件应该相对比较独立的。写完一个系统或者功能，可以简单的复制到下一个项目中使用，而不用去删除一大堆之前项目独有的引用，才是优秀的设计。</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>本文使用了Unity的easyEventManager插件。</p><p>今天介绍的是C#中的观察者模式，消息中心框架的实现。这个框架非常经典。总所周知，面向对象中的重大问题：如何去寻找对象的依赖。比如今天需要写的功能玩家死亡时要触发一个事件，可能很多组件都期待玩家死亡事件的发生，比如显示死亡UI，播放死亡音乐啥的。直接在Player.Die()函数中直接调用对应组件自然是大咩的。原因前面已经举例过了。这时利用观察者模式就可以做到解耦，我们需要一个“消息中心”作为中介，负责转发事件，结构如下图。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/5905ea6021a9f9177e394c1c4673a57e.jpeg"></p><p>可以看到，图中主要有两个依赖关系，一个是行为的注册关系，一个是事件的调用关系。使用一个消息中心作为媒介。这样图上缺少了任意一方，游戏都能正在运营下去，也很方便拓展。</p><p>如何实现消息中心的功能呢？我们可以认为指出调用什么事件可以是一个Key(String)，而注册行为可以是运行一个函数（委托），可能有很多个行为需要执行，很自然就想到了UnityEvent。实现这种键值对的对应关系，那么很清楚，字典就出来了嘛。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventManager</span><br>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Dictionary&lt;<span class="hljs-built_in">string</span>, UnityEvent&gt; eventDictionary = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, UnityEvent&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Dictionary&lt;<span class="hljs-built_in">string</span>, UnityAction&gt; callBacks = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, UnityAction&gt;();<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt; sender = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">object</span>&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">bool</span>&gt; paused = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">bool</span>&gt;();<br>&#125;<br></code></pre></td></tr></table></figure><p>如何实现注册事件的功能，只需要维护字典就行了，</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void <span class="hljs-constructor">StartListening(<span class="hljs-params">string</span> <span class="hljs-params">eventName</span>, UnityAction <span class="hljs-params">callBack</span>, <span class="hljs-params">string</span> <span class="hljs-params">callBackID</span> = <span class="hljs-string">&quot;&quot;</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (eventDictionary.<span class="hljs-constructor">TryGetValue(<span class="hljs-params">eventName</span>, <span class="hljs-params">out</span> UnityEvent <span class="hljs-params">thisEvent</span>)</span>)<br>    &#123;<br>        thisEvent.<span class="hljs-constructor">AddListener(<span class="hljs-params">callBack</span>)</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        thisEvent = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UnityEvent()</span>;<br>        thisEvent.<span class="hljs-constructor">AddListener(<span class="hljs-params">callBack</span>)</span>;<br>        eventDictionary.<span class="hljs-constructor">Add(<span class="hljs-params">eventName</span>, <span class="hljs-params">thisEvent</span>)</span>;<br>        paused.<span class="hljs-constructor">Add(<span class="hljs-params">eventName</span>, <span class="hljs-params">false</span>)</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (callBackID != <span class="hljs-string">&quot;&quot;</span>) callBacks.<span class="hljs-constructor">Add(<span class="hljs-params">eventName</span> + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-params">callBackID</span>, <span class="hljs-params">callBack</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的道理，我们在实现注销事件的功能：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void <span class="hljs-constructor">StopListening(<span class="hljs-params">string</span> <span class="hljs-params">eventName</span>, <span class="hljs-params">string</span> <span class="hljs-params">callBackID</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (eventDictionary.<span class="hljs-constructor">TryGetValue(<span class="hljs-params">eventName</span>, <span class="hljs-params">out</span> UnityEvent <span class="hljs-params">thisEvent</span>)</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (callBackID != <span class="hljs-string">&quot;&quot;</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (callBacks.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">eventName</span> + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-params">callBackID</span>)</span>)<br>            &#123;<br>                thisEvent.<span class="hljs-constructor">RemoveListener(<span class="hljs-params">callBacks</span>[<span class="hljs-params">eventName</span> + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-params">callBackID</span>])</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (callBacks.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">eventName</span> + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-params">callBackID</span> + <span class="hljs-string">&quot;_EXTRA&quot;</span>)</span>)<br>            &#123;<br>                thisEvent.<span class="hljs-constructor">RemoveListener(<span class="hljs-params">callBacks</span>[<span class="hljs-params">eventName</span> + <span class="hljs-string">&quot;_&quot;</span> + <span class="hljs-params">callBackID</span> + <span class="hljs-string">&quot;_EXTRA&quot;</span>])</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br>public static void <span class="hljs-constructor">StopListening(<span class="hljs-params">string</span> <span class="hljs-params">eventName</span>, UnityAction <span class="hljs-params">callBack</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (eventDictionary.<span class="hljs-constructor">TryGetValue(<span class="hljs-params">eventName</span>, <span class="hljs-params">out</span> UnityEvent <span class="hljs-params">thisEvent</span>)</span>)<br>    &#123;<br>        thisEvent.<span class="hljs-constructor">RemoveListener(<span class="hljs-params">callBack</span>)</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，不只是用callBack（UnityAction）作为事件标识，也同样使用了callBackID（string），主要原因是为了解决使用lambda表达式出现的标识唯一问题（即当使用Lambda注册事件时，需要表明callBackID，否者就再也不能单独找到这个事件去注销它，因为Lambda的每次出现编译器的闭包都是唯一的）</p><p>接着是发送事件功能</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public static void <span class="hljs-constructor">EmitEvent(<span class="hljs-params">string</span> <span class="hljs-params">eventName</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Paused(<span class="hljs-params">eventName</span>)</span>) return;<br><br>    <span class="hljs-keyword">if</span> (eventDictionary.<span class="hljs-constructor">TryGetValue(<span class="hljs-params">eventName</span>, <span class="hljs-params">out</span> UnityEvent <span class="hljs-params">thisEvent</span>)</span>)<br>    &#123;<br>        thisEvent.<span class="hljs-constructor">Invoke()</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后我们最好使用一个枚举约束以下所有事件的行为</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-comment">//根据每个项目的实际需求需要单独添加</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> EventEnum &#123;<br>    <span class="hljs-literal">None</span>,<br>    <br>PlayerDie,<br>&#125;<br></code></pre></td></tr></table></figure><p>现在回到我们前言中的问题：如何在玩家死亡时合理调用一系列事件，以下格式可作为参考：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerControl</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PlayerDie</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//发送事件消息</span><br>        EventManager.Emit(EventEnum.PlayerDie.ToString());<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">UIManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">//生成死亡UI</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateDieUI</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    <span class="hljs-comment">//在Start中监听</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        EventManager.StartListening(EventEnum.PlayerDie.ToString(),CreateDieUI);<br>    &#125;<br>    <span class="hljs-comment">//注意注册的事件一定要记得注销，不然会一直存在消息中心,还会报错</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Destroy</span>()</span><br>    &#123;<br>        EventManager.StopListening(EventEnum.PlayerDie.ToString(),CreateDieUI);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AudioManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">//播放音乐</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Play</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> audioName</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//...</span><br>    &#125;<br>    <br>    <span class="hljs-comment">//如果使用了lambda表达式，需要用ID标注以下，不然注销不了</span><br>    <span class="hljs-comment">//推荐可以使用GetHashCode()作为ID</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        EventManager.StartListening(EventEnum.PlayerDie.ToString(),<br>        <span class="hljs-built_in">delegate</span>()&#123; Play(<span class="hljs-string">&quot;脚步声&quot;</span>); &#125;  ,GetHashCode());<br>    &#125;<br>    <span class="hljs-comment">//注意注册的事件一定要记得注销</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Destroy</span>()</span><br>    &#123;<br>        EventManager.StopListening(EventEnum.PlayerDie.ToString(),GetHashCode());<br>    &#125;<br>    <br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>这个框架当然也是有缺点的。举例作者其中遇到的一个。观察者模式将需要触发的事件用一条委托链表示，当触发时一条一条执行下去。当某一个节点出现问题报错时，剩下的所有节点都无法执行。</p><p>完整版的源码比较长，已放在github了，这个事件插件也有其他功能，比如定义事件的发送者（可以用来实现音频管理器，这样就可以找到发声者实现3D音频效果了），暂时禁用事件啥的，读者可以自己阅读源码和注释探索。</p><p><a href="https://github.com/sugarzo/UnityEventManager" title="https://github.com/sugarzo/UnityEventManager">https://github.com/sugarzo/UnityEventManager</a></p><p> 对于框架设计的进一步运用，可参考这篇文档</p><p><a href="https://blog.csdn.net/m0_51776409/article/details/124854564?spm=1001.2014.3001.5501" title="[Unity] 状态机事件流程框架 (一)（C#观察者模式 事件系统，Trigger与Action）_Sugarzo的博客-CSDN博客_unity 事件框架">[Unity] 状态机事件流程框架 (一)（C#观察者模式 事件系统，Trigger与Action）_Sugarzo的博客-CSDN博客_unity 事件框架</a></p><p>本文内容部分启发于了以下文章，作者写的很好，在此也分享下:</p><p><a href="https://zhuanlan.zhihu.com/p/411110704" title="Unity中Find问题的本质 - 知乎">Unity中Find问题的本质 - 知乎</a></p><p>本文转自 <a href="https://blog.csdn.net/m0_51776409/article/details/126150120">https://blog.csdn.net/m0_51776409/article/details/126150120</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>设计模式</tag>
      
      <tag>C#</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unity中对象池的使用</title>
    <link href="/2022/05/22/%E3%80%90Unity%E3%80%91unity%E4%B8%AD%E5%AF%B9%E8%B1%A1%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8_Sugarzo%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/05/22/%E3%80%90Unity%E3%80%91unity%E4%B8%AD%E5%AF%B9%E8%B1%A1%E6%B1%A0%E7%9A%84%E4%BD%BF%E7%94%A8_Sugarzo%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>在Unity中使用的是托管代码，基于此我们不必像手动管理内存，造成内存泄露等问题。在每隔一段时间，Mono的垃圾回收机制将检测内存，将没有再被引用的内存释放回收。当我们使用一个新的游戏物品（实例）时，首先需要实例化它（Instantiate，实际上也是基于new的机制实现的），在我们使用GameObject完成后便摧毁它（Destory）</p><p>但是，申请实例化时，意味着我们需要在托管堆上分配一块新的内存给Object，在回收时，我们需要等待回收机制收回该块内存，这意味着当我们使用一些短期GameObject（比如在射击游戏中的子弹，往往单个存在时间只有1s左右，但是在同一时刻场景中往往存在着大量的发射和销毁事件），频繁调用Instantiate和Destory去实例化和销毁会极大的</p><p>因此，对象池思想出现了。对象池思想的核心是当我们暂时不再需要某个单个物品时，不再使用Destory，而只是隐藏它（SetActive(false)），并将其放入一个重用字典（或者数组）中，我们称这个存储所有激活或非激活的物品的称为池子。之后需要时，我们会先从重用数组中试着找是否当前有可用的实例并显示，如果没有再去实例化它。</p><p>我们现在来实现一个对象池的脚本。对象池脚本不一定需要搭载在游戏物品上，因此这里的单例没有使用mono，不过也可以用作为Manager管理类搭载在游戏物品上管理。然后我们用一个字典，是一个string(游戏物品名称)对游戏物品队列的键值 来存储所有当前被隐藏的物品。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs smali">public class ObjectPool<br>&#123;<br>   <span class="hljs-keyword"> private</span><span class="hljs-keyword"> static</span> ObjectPool instance;<br>   <span class="hljs-keyword"> private</span> Dictionary&lt;string, Queue&lt;GameObject&gt;&gt; objectPool =<span class="hljs-built_in"> new </span>Dictionary&lt;string, Queue&lt;GameObject&gt;&gt;();<br>   <span class="hljs-keyword"> private</span> GameObject pool;<br>   <span class="hljs-keyword"> public</span><span class="hljs-keyword"> static</span> ObjectPool Instance<br>    &#123;<br>        get<br>        &#123;<br>           <span class="hljs-built_in"> if </span>(instance == null)<br>            &#123;<br>               <span class="hljs-built_in"> instance </span>=<span class="hljs-built_in"> new </span>ObjectPool();<br>            &#125;<br>           <span class="hljs-built_in"> return </span>instance;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先我们来实现创建物品逻辑，思路如下：先根据名称在对象池字典中寻找相应队列中是否有该物品的隐藏实例，如果有则从队列中取出该物品并将其setActive(true)，如果没有则实例化它，设置对应的父物品方便在窗口中查看，最后返回该物品。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public GameObject <span class="hljs-constructor">GetObject(GameObject <span class="hljs-params">prefab</span>)</span><br>&#123;<br>    GameObject _object;<br><br>    <span class="hljs-keyword">if</span> (pool<span class="hljs-operator"> == </span>null) <span class="hljs-comment">//当场景没有对象池时（第一次进入游戏或者切换了场景），新建一个对象池游戏物品并清空字典</span><br>    &#123;<br>        pool = <span class="hljs-keyword">new</span> <span class="hljs-constructor">GameObject(<span class="hljs-string">&quot;ObjectPool&quot;</span>)</span>;<br>        objectPool = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, Queue&lt;GameObject&gt;&gt;<span class="hljs-literal">()</span>;<br>    &#125;<br>    <span class="hljs-comment">//如果池子里没有该物品</span><br>    <span class="hljs-keyword">if</span> (!objectPool.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">prefab</span>.<span class="hljs-params">name</span>)</span><span class="hljs-operator"> || </span>objectPool<span class="hljs-literal">[<span class="hljs-identifier">prefab</span>.<span class="hljs-identifier">name</span>]</span>.Count<span class="hljs-operator"> == </span><span class="hljs-number">0</span>) <br>    &#123;<br>        <span class="hljs-comment">//实例化它，加入队列</span><br>        _object = GameObject.<span class="hljs-constructor">Instantiate(<span class="hljs-params">prefab</span>)</span>;<br>        <span class="hljs-constructor">PushObject(<span class="hljs-params">_object</span>)</span>;<br><br>        GameObject childPool = GameObject.<span class="hljs-constructor">Find(<span class="hljs-params">prefab</span>.<span class="hljs-params">name</span> + <span class="hljs-string">&quot;Pool&quot;</span>)</span>;<br>        <span class="hljs-keyword">if</span> (!childPool)<br>        &#123;<br>            childPool = <span class="hljs-keyword">new</span> <span class="hljs-constructor">GameObject(<span class="hljs-params">prefab</span>.<span class="hljs-params">name</span> + <span class="hljs-string">&quot;Pool&quot;</span>)</span>;<br>            childPool.transform.<span class="hljs-constructor">SetParent(<span class="hljs-params">pool</span>.<span class="hljs-params">transform</span>)</span>;<br>        &#125;<br>        <span class="hljs-comment">//设置到相对于的子物品下，方便管理</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">_object</span>.</span></span>transform.<span class="hljs-constructor">SetParent(<span class="hljs-params">childPool</span>.<span class="hljs-params">transform</span>)</span>;<br>    &#125;<br>    <span class="hljs-comment">//从队列中提取对象，返回</span><br>    _object = objectPool<span class="hljs-literal">[<span class="hljs-identifier">prefab</span>.<span class="hljs-identifier">name</span>]</span>.<span class="hljs-constructor">Dequeue()</span>;<br>    _object.<span class="hljs-constructor">SetActive(<span class="hljs-params">true</span>)</span>;<br>    return _object;<br>&#125;<br></code></pre></td></tr></table></figure><p>在回收物品时，我们只需要将其SetActive（false），并放入该物品的存储队列即可</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public void <span class="hljs-constructor">PushObject(GameObject <span class="hljs-params">prefab</span>)</span><br>&#123;<br>    <span class="hljs-comment">//通过Instantiate实例化的物品都带有（Clone）后缀，我们将其去除再存储</span><br>    <span class="hljs-built_in">string</span> _name = prefab.name.<span class="hljs-constructor">Replace(<span class="hljs-string">&quot;(Clone)&quot;</span>, <span class="hljs-params">string</span>.Empty)</span>;<br>    <span class="hljs-keyword">if</span> (!objectPool.<span class="hljs-constructor">ContainsKey(<span class="hljs-params">_name</span>)</span>)<br>        objectPool.<span class="hljs-constructor">Add(<span class="hljs-params">_name</span>, <span class="hljs-params">new</span> Queue&lt;GameObject&gt;()</span>);<br>    objectPool<span class="hljs-literal">[<span class="hljs-identifier">_name</span>]</span>.<span class="hljs-constructor">Enqueue(<span class="hljs-params">prefab</span>)</span>;<br>    prefab.<span class="hljs-constructor">SetActive(<span class="hljs-params">false</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，一个简单的对象池就实现出来了。我们使用 ObjectPool.Instance.GetObject（prefab）代替GameObject.Instantiate，ObjectPool.Instance.push（）代替GameObject.Destroy即可。</p><p>现在我们来实践一下这个对象池的用法，这里写了一个简单的功能，鼠标左键在鼠标位置生成物品1，右键生成物品2，然后每个生成的物品都会在1s后被回收：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">using System;<br>using System.Collections;<br>using System.Collections.Generic;<br>using UnityEngine;<br><br>public <span class="hljs-keyword">class</span> ObjectPoolTest : MonoBehaviour<br>&#123;<br>    public GameObject mouseLeft; <span class="hljs-comment">//左键生成</span><br>    public GameObject mouseRight; <span class="hljs-comment">//右键生成</span><br>    <span class="hljs-comment">// Update is called once per frame</span><br>    void <span class="hljs-constructor">Update()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.<span class="hljs-constructor">GetKeyDown(KeyCode.Mouse0)</span>)<br>        &#123;<br>            var obj = ObjectPool.Instance.<span class="hljs-constructor">GetObject(<span class="hljs-params">mouseLeft</span>)</span>;<br>            obj.transform.position = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Camera</span>.</span></span>main.<span class="hljs-constructor">ScreenToWorldPoint(Input.<span class="hljs-params">mousePosition</span>)</span> + <span class="hljs-keyword">new</span> <span class="hljs-constructor">Vector3(0,0,10)</span>;<br>            <span class="hljs-constructor">StartCoroutine(DelayAction(()</span> =&gt; ObjectPool.Instance.<span class="hljs-constructor">PushObject(<span class="hljs-params">obj</span>)</span>, <span class="hljs-number">1</span>f));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Input.<span class="hljs-constructor">GetKeyDown(KeyCode.Mouse1)</span>)<br>        &#123;<br>            var obj = ObjectPool.Instance.<span class="hljs-constructor">GetObject(<span class="hljs-params">mouseRight</span>)</span>;<br>            obj.transform.position = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Camera</span>.</span></span>main.<span class="hljs-constructor">ScreenToWorldPoint(Input.<span class="hljs-params">mousePosition</span>)</span> + <span class="hljs-keyword">new</span> <span class="hljs-constructor">Vector3(0, 0, 10)</span>; ;<br>            <span class="hljs-constructor">StartCoroutine(DelayAction(()</span> =&gt; ObjectPool.Instance.<span class="hljs-constructor">PushObject(<span class="hljs-params">obj</span>)</span>, <span class="hljs-number">1</span>f));<br>        &#125;<br>    &#125;<br>    IEnumerator <span class="hljs-constructor">DelayAction(Action <span class="hljs-params">callback</span>,<span class="hljs-params">float</span> <span class="hljs-params">timer</span>)</span><br>    &#123;<br>        yield return <span class="hljs-keyword">new</span> <span class="hljs-constructor">WaitForSeconds(<span class="hljs-params">timer</span>)</span>;<br>        callback?.<span class="hljs-constructor">Invoke()</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/dc413b61b0cb42d6b5a9e50dfda7880e.png"></p><p>（这里物品1用了蓝色正方形，物品2用了红色圆形，给脚本赋值对应的物品）</p><p>实际表现效果和Hierarchy窗口显示：</p><p><img src="https://img-blog.csdnimg.cn/cf6eb6838127476ab54176669ea33e38.gif"></p><p><img src="https://img-blog.csdnimg.cn/280e31afde3948f0be56fdf47966f456.png">       </p><p>这里只是介绍了一个简单对象池,Unity资源商店中也有封装好，有更多功能的对象池插件（这里推荐Lean Pool），感兴趣的也可以直接去使用更成熟的池子<del>（毕竟已经有车了为什么还要去造轮子么</del></p><p>总之，对象池技术提高了性能，使程序不必再频繁的做内存交换造成性能损失，但它是以内存占用为代价的。但总之，相比于对频繁的GameObject的Instantiate()和Destroy()调用，对象池还是非常能接受的。在游戏的预加载阶段也可以提前载入数据，在切换场景等空闲时段再集中对池子中内容回收优化。</p>]]></content>
    
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>设计模式</tag>
      
      <tag>对象池</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unity 状态机事件流程框架 (一)（C#事件系统，Trigger与Action）</title>
    <link href="/2022/05/21/Unity%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/05/21/Unity%E6%A1%86%E6%9E%B6%E5%BC%80%E5%8F%91%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>设计游戏时，框架设计时十分重要的，项目内容一大，各个功能系统间的耦合性就会不可避免的增加，如果初期时没有规划好，后期维护时成本就会大大增加。观察者模式时框架设计时常用的一种解耦方式。</p><p><strong>观察者模式</strong>（Observer Pattern）是一种一对多的关系时。比如，当一个对象被修改时，则会自动通知依赖它的对象（广播）。观察者模式属于行为型模式，有着易用和低耦合，保证高度的协作的优势。</p><p>本期是在Unity实现一个简单的框架应用。这可以减少脚本的编写量，通过预先在脚本中写好可以复用的功能，并在场景的游戏物品中修改脚本中的参数，就可控制事件的发送和执行的事件内容。有着简单使用，方便扩张的有点。</p><p>这套框架是今年打CUSGA和项目主程（帅神）学到的，自己从中总结了很多知识，自己也针对其中的思想做了优化。也欢迎来bilibili给游戏宣传片贡献播放量（x</p><p><a href="https://www.bilibili.com/video/BV1GA4y197hY?spm_id_from=333.337.search-card.all.click&vd_source=0700bf835ba9b724fbf90b19be87fb23" title="【CUSGA 2022】《藏星》温暖治愈的剧情解谜游戏">【CUSGA 2022】《藏星》温暖治愈的剧情解谜游戏</a></p><h1 id="框架概要"><a href="#框架概要" class="headerlink" title="框架概要"></a>框架概要</h1><p>（本文脚本中使用了odin插件）</p><p>我们先使用一个简单的例子作为引入：</p><p><img src="https://img-blog.csdnimg.cn/66e9df7925bb44d9b827bd1bd8bcea32.gif"></p><p>可以看到，在我们点击了按钮后，一个游戏方块向左移动，在向右移动完成后，方块被摧毁并且debug了一段信息。是一个非常简单的游戏逻辑。如果让这段逻辑变得可复用和好维护，是我们框架的主要目标（比如我们写好了一个移动功能，那么下次再遇到类似的逻辑就可以拿出来直接使用，而不需要再创建一段代码）。我们从以上逻辑拆分以下模块并让它直观化：</p><p>玩家按下按钮（触发器Trigger）</p><p>-&gt;物品移动（事件Action）</p><p>-&gt;物品销毁（事件Action）</p><p>-&gt;Debug信息（事件Action）</p><p><img src="https://img-blog.csdnimg.cn/adba4a8e4644492f985bebf1f0d466d6.png"></p><p>使用结构类似一个文件管理的树状层次结构，我们使用单个游戏物品，用来表示一个触发器或者一个事件。每个单独事件作为一个子物品，将放在一个触发器下，当触发器条件被满足时，事件将会被会被顺序执行。且trigger和Action可以再Inspector窗口中编辑，查看他们当前的状态。</p><p><img src="https://img-blog.csdnimg.cn/5611ea9d56b44e0cba4086c7813ea8b1.png"></p><p> <img src="https://img-blog.csdnimg.cn/59ba36b70f0546359a450c3c87d12d69.png"></p><p><img src="https://img-blog.csdnimg.cn/3280edde793e4e949f7b67ce5b2a2164.png"></p><p><img src="https://img-blog.csdnimg.cn/a904128ec18942eebe64ce088cd84283.png"></p><p>现在我们开始设计以下这个流程。简单思考，如果我们需要在游戏中执行某个逻辑（事件），最基础的流程如下：</p><p><strong>收到触发该事件的指令-&gt;执行该事件内容-&gt;事件执行完成，执行下一步操作（回调）</strong></p><p>我们定义几个基本概念：</p><p>**Trigger:**触发器-决定了事件什么时候被触发。比如玩家按下某一按键、某个游戏状态改变、另一个事件完成时会触发。我们需要根据需求，自定义各个类型的触发器，当条件被满足时，便执行该触发器所绑定的事件内容。</p><p>**Action:**事件执行内容。游戏中会有各种各样需要实现的逻辑，为方便游戏搭建和维护，我们需要将各个功能模块划分出来，并提供一个统一的接口给Trigger调用，支持各个不同类型事件的排列组合。</p><p>我们先为上面两个概念提供最基础的状态框架，这里使用了一个抽象类作为Trigger和Action的统一基类，通过 protected virtual 留下了几个经典的状态机函数（进入，执行，退出）， executeType表示了当前的状态。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseState</span> : <span class="hljs-title">MonoBehaviour</span><br>    &#123;<br>        [<span class="hljs-meta">TextArea, LabelText(<span class="hljs-string">&quot;说明&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> content;<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;当前状态&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> ExecuteType executeType;<br><br>        <span class="hljs-keyword">public</span> BaseState parentState;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> ExecuteType<br>        &#123;<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;未执行&quot;</span>)</span>] None,<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;准备执行&quot;</span>)</span>] Enter,<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;正在执行&quot;</span>)</span>] Running,<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;执行完成 待机&quot;</span>)</span>] RunOver,<br>            [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;执行完成 退出&quot;</span>)</span>] Exit,<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            executeType = ExecuteType.None;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>        &#123;<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnEnter</span>()</span><br>        &#123;<br>            executeType = ExecuteType.Enter;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRunning</span>()</span><br>        &#123;<br>            executeType = ExecuteType.Running;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnRunOver</span>()</span><br>        &#123;<br>            executeType = ExecuteType.RunOver;<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnExit</span>()</span><br>        &#123;<br>            executeType = ExecuteType.Exit;<br>        &#125;<br><br><br>        [<span class="hljs-meta">Button(<span class="hljs-string">&quot;执行该状态&quot;</span>)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>        &#123;<br>            OnEnter();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Running</span>()</span><br>        &#123;<br>            OnRunning();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunOver</span>()</span><br>        &#123;<br>            OnRunOver();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Exit</span>()</span><br>        &#123;<br>            OnExit();<br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnValidate</span>()</span><br>        &#123;<br><br>        &#125;<br><br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnAddState</span>()</span><br>        &#123;<br><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Trigger-触发器"><a href="#Trigger-触发器" class="headerlink" title="Trigger-触发器"></a>Trigger-触发器</h2><p>触发器是决定事件何时被触发的关键。在传统的消息事件框架中，使用SendMessage等进行发送事件，这依靠反射机制查找消息不仅损耗性能，也不利于后期维护；而直接引用对应脚本调用对应的public函数等方式，则会大大提高程序的耦合度。</p><p>这里我们主要使用观察者模式和委托的思想去设置对应的Trigger。因为触发器应该是独立存在的个体，当它存在时它应该自动去监听事件是否发生，而消失时也会自动注销监听，不会与其他功能组件和脚本发生嵌套关系。我们继承BaseState重写方法来实现它：</p><p>一个Trigger需要的模块有：</p><p>1.一个触发这个Trigger的方式</p><p>2.执行事件，即调用子物体下的第一个Action，并能保证Action按照顺序执行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseTrigger</span> : <span class="hljs-title">BaseState</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;Trigger&quot;</span>)</span>]<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;执行Action&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> List&lt;BaseAction&gt; actions;<br><br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;在DisOnEnable中注销事件&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> DeleteEventOnDisEnable = <span class="hljs-literal">false</span>;    <br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetActions</span>()</span><br>        &#123;<br>            addActions.Clear();<br>            actions = <span class="hljs-keyword">new</span> List&lt;BaseAction&gt;(GetComponentsInChildren&lt;BaseAction&gt;());<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            GetActions();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">if</span> (executeType == ExecuteType.Running)<br>                <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-keyword">base</span>.Execute();<br><br>            Running();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Running</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Running();<br>            <span class="hljs-comment">//执行第一个命令</span><br>            <span class="hljs-keyword">if</span> (actions != <span class="hljs-literal">null</span> &amp;&amp; actions.Count &gt; <span class="hljs-number">0</span>)<br>            &#123;<br>                actions[<span class="hljs-number">0</span>].Execute();<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                RunOver();<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunOver</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.RunOver();<br><br>            Exit();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Exit</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Exit();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnDisable();<br><br>            <span class="hljs-keyword">if</span> (DeleteEventOnDisEnable)<br>                DeleteSaveTypeEvent();<br>        &#125;<br><br>        [<span class="hljs-meta">Button(<span class="hljs-string">&quot;绑定事件&quot;</span>)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RegisterSaveTypeEvent</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//EventManager.StartListening(&quot;&quot;);</span><br>        &#125;<br><br>        [<span class="hljs-meta">Button(<span class="hljs-string">&quot;注销事件&quot;</span>)</span>]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteSaveTypeEvent</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//EventManager.StopListening(&quot;&quot;);</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们先用了一个List<Action>获得了搭载该脚本物品的子物品下的Action函数，重写了Running()，状态的执行函数，让他执行子物品下第一个Action。同时，我们新建了两个函数RegisterSaveTypeEvent()和DeleteSaveTypeEvent()，用于监听事件的发生，当事件发生时执行对应的Execute函数即可。</p><p>比如这个Trigger用来绑定一个按钮，我们来实现一个ButtonTrigger，当玩家按下某个button时执行对应的事件。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ButtonTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;ButtonTrigger&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> Button btn;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Start();<br><br>            RegisterSaveTypeEvent();<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnDestroy();<br><br>            DeleteSaveTypeEvent();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RegisterSaveTypeEvent</span>()</span><br>        &#123;<br>            btn.onClick.AddListener(Execute);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DeleteSaveTypeEvent</span>()</span><br>        &#123;<br>            btn.onClick.RemoveListener(Execute);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="Action-事件执行内容"><a href="#Action-事件执行内容" class="headerlink" title="Action-事件执行内容"></a>Action-事件执行内容</h2><p>Trigger将顺序运行子物品下的所有Action,因此我们的Action需要的模块有：</p><p>1.实现自己需要的功能</p><p>2.当执行完成后，告知Trigger可以执行下一个Action了</p><p>3.当自己为Action列表最后一个时，告知Trigger所有事件已执行完毕，Trigger切换成已执行完成状态</p><p>我们来实现一个通用的BaseAction基类</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BaseAction</span> : <span class="hljs-title">BaseState</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;Action&quot;</span>)</span>]<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;延迟多少秒进入&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> delayTime;<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;延迟多少秒执行下一个&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> waitTime;<br>        [<span class="hljs-meta">LabelText(<span class="hljs-string">&quot;增加一段具体逻辑&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> UnityEvent _unityEvent;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            parentState = GetComponentInParent&lt;BaseTrigger&gt;();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Execute();<br><br>            <span class="hljs-keyword">if</span>(delayTime &gt; <span class="hljs-number">0</span>)<br>                Invoke(<span class="hljs-keyword">nameof</span>(Running), delayTime);<br>            <span class="hljs-keyword">else</span><br>                Running();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Running</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Running();<br>            RunningLogic();<br><br>        &#125;<br><br>        <span class="hljs-comment">//新Action只需重写RunningLogic()即可,并在结束时调用RunOver();</span><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunningLogic</span>()</span><br>        &#123;<br>            _unityEvent?.Invoke();<br><br>            <span class="hljs-comment">//RunOver();</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunOver</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.RunOver();<br><br>            <span class="hljs-keyword">if</span> (waitTime &gt; <span class="hljs-number">0</span>)<br>                Invoke(<span class="hljs-keyword">nameof</span>(Exit), waitTime);<br>            <span class="hljs-keyword">else</span><br>                Exit();<br><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Exit</span>()</span><br>        &#123;<br>            <span class="hljs-comment">//检查父节点Trigger，执行下一条命令或者结束Trigger</span><br>            <span class="hljs-keyword">if</span> (parentState != <span class="hljs-literal">null</span> &amp;&amp; parentState <span class="hljs-keyword">is</span> BaseTrigger baseTrigger)<br>            &#123;<br>                <span class="hljs-comment">//顺序执行</span><br>                <span class="hljs-keyword">var</span> index = baseTrigger.actions.IndexOf(<span class="hljs-keyword">this</span>);<br>                index++;<br>                <span class="hljs-keyword">if</span> (index &gt;= baseTrigger.actions.Count)<br>                &#123;<br>                    baseTrigger.RunOver();<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    baseTrigger.actions[index].Execute();<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">base</span>.Exit();<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnValidate</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnValidate();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们使用了UnityEvent方便我们可能的后续扩展。在派生类中可通过重写RunLogic（）实现我们需要的功能。在退出状态Exit()中，我们需要获得父物体Trigger，并检测自己对应Action列表的索引Index，并执行Trigger下Index+1的事件或者实行Trigger的RunOver事件来表示事件已经被执行完成。</p><p>我们用它来实现一个简单的Debug功能，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DebugLogAction</span> : <span class="hljs-title">BaseAction</span><br>    &#123;<br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;DebugLogAction&quot;</span>),TextArea</span>]<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> DebugContent = <span class="hljs-string">&quot;DebugLogAction Execute&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> Log = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> LogWarning = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> LogError = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunningLogic</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.RunningLogic();<br>            <span class="hljs-keyword">if</span>(Log)<br>                Debug.Log(DebugContent);<br>            <span class="hljs-keyword">if</span>(LogWarning)<br>                Debug.LogWarning(DebugContent);<br>            <span class="hljs-keyword">if</span>(LogError)<br>                Debug.LogError(DebugContent);<br><br>            RunOver();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>通过这个简单的例子，介绍了框架基本原理，在此基础上也很方便进行扩展。如果还有下期，会讲讲在这个框架上控制游戏状态的存储改变和其他拓展功能。</p><p>接着我们联立以下这篇帖子，实现一个事件在观察者模式下的监听Trigger</p><p><a href="https://blog.csdn.net/m0_51776409/article/details/126150120?spm=1001.2014.3001.5501" title="[Unity] C#使用委托事件与字典实现unity消息中心（观察者模式）_Sugarzo的博客-CSDN博客">[Unity] C#使用委托事件与字典实现unity消息中心（观察者模式）_Sugarzo的博客-CSDN博客</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EventTrigger</span> : <span class="hljs-title">BaseTrigger</span><br>    &#123;    <br>        [<span class="hljs-meta">Header(<span class="hljs-string">&quot;EventTrigger&quot;</span>)</span>]<br>        <span class="hljs-keyword">public</span> EventEnum eventEnum;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.Awake();<br>            <br>            EventManager.StartListening(eventEnum.ToString(),Execute);<br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>        &#123;<br>            <span class="hljs-keyword">base</span>.OnDestroy();<br><br>            EventManager.StopListening(eventEnum.ToString(), Execute);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//一个事件类型的枚举，根据项目需求进行添加</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> EventEnum<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>unity框架设计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译原理课程设计 设计SAMPLE语言的语法分析器 github源码（C++、LL(1)分析、语法制导翻译和中间代码生成）</title>
    <link href="/2022/05/20/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%20SAMPLE%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/"/>
    <url>/2022/05/20/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1%20SAMPLE%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>这里是lz大二上的编译原理实验课，课设要求模仿编译器的原理思想，用编译语言设计能够识别单词和简单语法的编译，当时摸了两天左右写了小一千行，在这里再回顾一下思路，并留下对应的源码供参考。</p><p>实验实现的方法有很多种，其中实验一的词法分析部分比较简单，这里重点分析语法分析部分。</p><h1 id="题目需求："><a href="#题目需求：" class="headerlink" title="题目需求："></a>题目需求：</h1><p><img src="https://img-blog.csdnimg.cn/f4e5ff2cb6ef4f089a5f53919efd698a.png"></p><p><img src="https://img-blog.csdnimg.cn/ac3d41b4770c4bb9957f9571bdfbb2f9.png"><img src="https://img-blog.csdnimg.cn/e1489e79494842d4aea4d5ebd2e8a19b.png"></p><p> <img src="https://img-blog.csdnimg.cn/6cc9bc7b2085449490925bcabc259c4d.png"></p><h1 id="实验一：词法分析"><a href="#实验一：词法分析" class="headerlink" title="实验一：词法分析"></a>实验一：词法分析</h1><p>这里用了stl::map等提前存储单词记录出现次数即可。这里就不展开详细描述了。一些具体细节的可参考github中的源码。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino">map&lt;string, <span class="hljs-type">int</span>&gt; sampleDictionary;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sampleDictionaryInit</span><span class="hljs-params">()</span> <span class="hljs-comment">//写好对应映射</span></span><br><span class="hljs-function"></span>&#123;<br>sampleDictionary[<span class="hljs-string">&quot;and&quot;</span>] = <span class="hljs-number">1</span>;<br>sampleDictionary[<span class="hljs-string">&quot;array&quot;</span>] = <span class="hljs-number">2</span>;<br>...<br>sampleDictionary[<span class="hljs-string">&quot;[&quot;</span>] = <span class="hljs-number">59</span>;<br>sampleDictionary[<span class="hljs-string">&quot;]&quot;</span>] = <span class="hljs-number">60</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//写出一些会用到的工具类函数，和二元式的数据结构</span><br><span class="hljs-keyword">struct</span> DoubleGroup &#123;<br><span class="hljs-built_in">int</span> a;<br><span class="hljs-built_in">int</span> b;<br><span class="hljs-built_in">string</span> Word;<br>DoubleGroup(<span class="hljs-built_in">string</span> w,<span class="hljs-built_in">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-built_in">int</span> y = <span class="hljs-number">0</span>)<br>&#123;<br>Word = w;<br>a = x;<br>b = y;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">isKeyWord</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> input</span>) <span class="hljs-comment">//是 关键字</span></span><br>&#123;<br><span class="hljs-keyword">if</span> (sampleDictionary[input])<br>&#123;<br><span class="hljs-keyword">if</span> (sampleDictionary[input] &gt;= <span class="hljs-number">1</span> &amp;&amp; sampleDictionary[input] &lt;= <span class="hljs-number">35</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">isNum</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> Input</span>) <span class="hljs-comment">//是 数字</span></span><br>&#123;<br><span class="hljs-keyword">if</span> (Input &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; Input &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">isLetter</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> Input</span>)<span class="hljs-comment">//是 字母</span></span><br>&#123;<br><span class="hljs-keyword">return</span> (Input &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; Input &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) || (Input &gt;= <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; Input &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">isDivided</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> Input</span>) <span class="hljs-comment">//是 分隔符</span></span><br>&#123;<br><span class="hljs-keyword">if</span> (sampleDictionary[Input])<br>&#123;<br><span class="hljs-keyword">if</span> (sampleDictionary[Input] &gt;= <span class="hljs-number">39</span> &amp;&amp; sampleDictionary[Input] &lt;= <span class="hljs-number">60</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (Input == <span class="hljs-string">&quot; &quot;</span> || Input == <span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="实验二：语法分析"><a href="#实验二：语法分析" class="headerlink" title="实验二：语法分析"></a>实验二：语法分析</h1><p> 这里具体展开讲讲实验二中的实现方法</p><p><img src="https://img-blog.csdnimg.cn/7a391a7f0dcc4113ad6f64f0c6ffd3d4.png"></p><p> 程序核心思想：<strong><strong>LL(1)分析法</strong></strong>。让产生式右部逐个文法符号与输入串匹配，每当一个文法符号获得匹配，就可以执行语义动作。</p><p>语法分析用到的<strong><strong>函数原型</strong></strong>：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp">   <span class="hljs-comment">//语法分析用到的函数原型：</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gramma_analysis</span>()</span>;   <span class="hljs-comment">//语法分析，负责逐字扫描单词，压语义栈，跳转到对应语义动作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gramma_Expression</span>()</span>;  <span class="hljs-comment">//表达式的四元式翻译</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gramma_Expression</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gramma_Assignment</span>()</span>;  <span class="hljs-comment">//赋值句的四元式翻译</span><br>EState&amp; Gramma_Condition(); <span class="hljs-comment">//bool式的四元式翻译，返回整个bool式子的状态E</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gramma_FrontQuaternions</span>()</span>; <span class="hljs-comment">//四元式生成前调用，在这里匹配语义栈执行对应语义动作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Gramma_Quaternions_MergeJump</span>()</span>; <span class="hljs-comment">//在最终输出前先合并一次jump</span><br></code></pre></td></tr></table></figure><p>语法分析用到的<strong>数据结构（struct）</strong>:</p><p>其中，一些表达式的属性需要记录，比如bool表达式需要知道入口，一些条件需要对应的真出口与假出口等，并设置根据链表的回填方法。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>四元组<br>struct Quaternion &#123;<br>string v1, v2, v3, v4;<br>int index;<br>Quaternion(int _index, string _v1 = <span class="hljs-string">&quot;-&quot;</span>, string _v2 = <span class="hljs-string">&quot;-&quot;</span>, string _v3 = <span class="hljs-string">&quot;-&quot;</span>, string _v4 = <span class="hljs-string">&quot;-&quot;</span>)<br>&#123;<br>index = _index;<br>v1 = _v1;<br>v2 = _v2;<br>v3 = _v3;<br>v4 = _v4;<br>&#125;<br>&#125;;<br>vector&lt;Quaternion&gt; Quaternions；<br><span class="hljs-regexp">//</span>bool表达式的属性<br>struct EState<br>&#123;<br>int selfpos; <span class="hljs-regexp">//</span>自己在四元组中对应的位置<br>int _true; <span class="hljs-regexp">//</span>真出口<br>int _false; <span class="hljs-regexp">//</span>假出口<br>bool isCorrect; <span class="hljs-regexp">//</span>锁定 真出口&amp;假出口，给e1 or e2 或 e1 and e2情况下使用<br>EState* _trueList; <span class="hljs-regexp">//</span>回填真出口的链表<br>EState* _falseList;<span class="hljs-regexp">//</span>回填假出口的链表<br>EState(int _index) <span class="hljs-regexp">//</span>构造函数<br>&#123;<br>selfpos = _index;<br>_true = -<span class="hljs-number">1</span>;<br>_false = -<span class="hljs-number">1</span>;<br>_trueList = NULL;<br>_falseList = NULL;<br>isCorrect = false;<br>&#125;<br>EState*&amp; GetTlist() <span class="hljs-regexp">//</span>得到需要回填的真出口链表尾<br>&#123;<br><span class="hljs-keyword">if</span> (_trueList == NULL)<br>return _trueList;<br><span class="hljs-keyword">else</span><br>return _trueList-&gt;GetTlist();<br>&#125;<br>EState*&amp; GetFlist() <span class="hljs-regexp">//</span>得到需要回填的假出口链表尾<br>&#123;...&#125;<br>void backpatch_T(int <span class="hljs-keyword">exit</span>) <span class="hljs-regexp">//</span>回填真出口<br>&#123;<br>_true = <span class="hljs-keyword">exit</span>;<br><span class="hljs-keyword">if</span> (selfpos &gt; <span class="hljs-number">0</span> &amp;&amp; !isCorrect)<br>&#123;<br>Quaternions[selfpos].v4 = ToString(_true);<br>&#125;<br><span class="hljs-keyword">if</span> (_trueList == NULL)<br>return;<br><span class="hljs-keyword">else</span><br>_trueList-&gt;backpatch_T(<span class="hljs-keyword">exit</span>);<br>&#125;<br>void backpatch_F(int <span class="hljs-keyword">exit</span>)<span class="hljs-regexp">//</span>回填假出口<br>&#123;...&#125;<br>&#125;;<br><span class="hljs-regexp">//i</span>f <span class="hljs-keyword">while</span> repeat的属性<br>struct if_State<br>&#123;<br>EState* E;      <span class="hljs-regexp">//</span>对应的bool表达式<br>int pos_ElseQ;  <span class="hljs-regexp">//</span>如果该<span class="hljs-keyword">if</span>出现了对应的<span class="hljs-keyword">else</span>，要记录该E.false的入口和E.true的出口<br>if_State(EState&amp; _temp)<br>&#123;<br>E = &amp;_temp;<br>pos_ElseQ = -<span class="hljs-number">1</span>;<br>&#125;<br>void backpatch_T(int <span class="hljs-keyword">exit</span>)<br>&#123;<br>E-&gt;backpatch_T(<span class="hljs-keyword">exit</span>);<br>&#125;<br>void backpatch_F(int <span class="hljs-keyword">exit</span>)<br>&#123;<br>E-&gt;backpatch_F(<span class="hljs-keyword">exit</span>);<br>&#125;<br><br>&#125;;<br>struct while_State<br>&#123;<br>int Enter; <span class="hljs-regexp">//</span><span class="hljs-keyword">while</span>入口编号<br>EState* E; <span class="hljs-regexp">//</span>对应的bool表达式<br>void backpatch_T(int <span class="hljs-keyword">exit</span>)<br>&#123;<br>E-&gt;backpatch_T(<span class="hljs-keyword">exit</span>);<br>&#125;<br>void backpatch_F(int <span class="hljs-keyword">exit</span>)<br>&#123;<br>E-&gt;backpatch_F(<span class="hljs-keyword">exit</span>);<br>&#125;<br>while_State(EState&amp; _temp,int _enter = _curr_index)<br>&#123;<br>E = &amp;_temp;<br>Enter = _enter;<br>&#125;<br>&#125;;<br>struct repeat_State<br>&#123;<br>int Enter; <span class="hljs-regexp">//</span>repeat入口编号<br>EState* E; <span class="hljs-regexp">//</span>对应的bool表达式<br>repeat_State(int _enter)<br>&#123;<br>Enter = _enter;<br>E = NULL;<br>&#125;<br>void backpatch_T(int <span class="hljs-keyword">exit</span>)<br>&#123;<br>E-&gt;backpatch_T(<span class="hljs-keyword">exit</span>);<br>&#125;<br>void backpatch_F(int <span class="hljs-keyword">exit</span>)<br>&#123;<br>E-&gt;backpatch_F(<span class="hljs-keyword">exit</span>);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong><strong>存储struct的存储结构（STL）如下</strong></strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">stack&lt;string&gt; StateStack; <span class="hljs-comment">//语义栈 只会出现if\else\then\while\do的动作符</span><br><br>stack&lt;if_State&gt; ifStack;<br><br>stack&lt;while_State&gt; whileStack;<br><br>stack&lt;repeat_State&gt; repeatState;<br><br>list&lt;EState&gt; e_Storage;   <span class="hljs-comment">//bool表达式、储存ei条件的状态</span><br><br>list&lt;EState&gt; E_stateList; <span class="hljs-comment">//储存E条件的状态</span><br></code></pre></td></tr></table></figure><p>*<em><strong>语法分析</strong></em>*****Gramma_analysis()****<strong><strong>函数</strong></strong>：（通过Quaternions.push_back（）生成四元组）</p><p>实验一中已将每个单词存入words数组（string）中，通过扫描words数组的单词，当该单词有对应的语义动作时，调用对应的语义动作：</p><ol><li> 当前单词为****:=<strong><strong>时，调用赋值句的生成函数</strong></strong>Gramma_Assignment();****</li><li> 当前单词为<strong><strong>if\while\until</strong></strong>时：先调用****Gramma_Condition()****生成对应的bool表达式和四元式，然后生成自身的属性，压入语义栈</li><li> 当前单词为<strong><strong>else\repeat\then\do</strong></strong>时:压入语义栈</li></ol><p> 这里写一下对应的伪代码</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">void</span> sampleAnalyze::<span class="hljs-type">Gramma_analysis</span>()<br>&#123;<br><span class="hljs-keyword">while</span> (循环单词表)<br>&#123;<br><span class="hljs-meta">&#123;...&#125;</span><br><span class="hljs-keyword">if</span> (如果当前单词为:=)<br>&#123;<br><span class="hljs-type">Gramma_Assignment</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (如果当前单词为<span class="hljs-string">&quot;if&quot;</span>)<br>&#123;<br><span class="hljs-type">Gramma_FrontQuaternions</span>();<br>ifStack.push(<span class="hljs-type">Gramma_Condition</span>());<br><span class="hljs-type">StateStack</span>.push(<span class="hljs-string">&quot;if&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (如果当前单词为<span class="hljs-string">&quot;while&quot;</span>)<br>&#123;<br><span class="hljs-type">Gramma_FrontQuaternions</span>();<br><span class="hljs-type">int</span> _enter = _curr_index;<br>whileStack.push( while_State(<span class="hljs-type">Gramma_Condition</span>(),_enter) );<br><span class="hljs-type">StateStack</span>.push(<span class="hljs-string">&quot;while&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (如果当前单词为<span class="hljs-string">&quot;repeat&quot;</span>)<br>&#123;<br>repeatState.push( repeat_State(-<span class="hljs-number">1</span>) ); //标记需要回填repeat的入口<br>&#125;<br><span class="hljs-keyword">if</span> (如果当前单词为<span class="hljs-string">&quot;then&quot;</span>/<span class="hljs-string">&quot;else&quot;</span>/<span class="hljs-string">&quot;do&quot;</span>)<br>&#123;<br>             //压入语义栈<br><span class="hljs-type">StateStack</span>.push(<span class="hljs-string">&quot;then&quot;</span>)/<span class="hljs-type">StateStack</span>.push(<span class="hljs-string">&quot;else&quot;</span>)/<span class="hljs-type">StateStack</span>.push(<span class="hljs-string">&quot;do&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (如果当前单词为<span class="hljs-string">&quot;until&quot;</span>)<br>&#123;<br>repeatState.top().E = &amp;<span class="hljs-type">Gramma_Condition</span>();<br>repeatState.top().backpatch_F(repeatState.top().<span class="hljs-type">Enter</span>);//假出口为repeat的入口<br>repeatState.top().backpatch_T(_curr_index);//真出口为until下一行<br>repeatState.pop();<br>&#125;;<br><span class="hljs-meta">&#123;...&#125;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>*<em><strong>赋值式的处理</strong></em>*****Gramma_Assignment()*<em><strong><strong><strong>：</strong></strong> 标记：=位置，调用算式表达式处理</strong></em>*Gramma_Expression()****后，生成对应四元式。</p><p>*<em><strong>算式表达式处理</strong></em>*****Gramma_Expression()****<strong><strong>：</strong></strong>扫描整个算式符，标记加减+-；乘除*/的位置，先计算乘除*/，再计算加减+-，生成四元式</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">void</span> sampleAnalyze::<span class="hljs-type">Gramma_Expression</span>()<br>&#123;<br>list&lt;<span class="hljs-type">int</span>&gt; multip_division; //乘除标志位<br>list&lt;<span class="hljs-type">int</span>&gt; add_sub; //加减标志位<br><span class="hljs-keyword">while</span> (遍历算式表达式)<br>&#123;<br><span class="hljs-keyword">if</span> (如果当前单词为<span class="hljs-string">&quot;*&quot;</span> || 如果当前单词为<span class="hljs-string">&quot;/&quot;</span>)<br>&#123;<br>记录该单词位置<br>&#125;<br>&#125;<br><span class="hljs-type">Gramma_FrontQuaternions</span>();<br>//处理乘除，再处理加减<br><span class="hljs-keyword">while</span> (遍历标记的所有乘除位置)<br>&#123;<br>根据标记位置的前后单词，产生四元式，产生中间代码<span class="hljs-type">Ti</span><br>&#125;<br>     按照同样逻辑再处理加减运算符<br><span class="hljs-meta">&#123;...&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><strong>Bool表达式的分析</strong>*****<em>Gramma_Condition()*<em><strong><strong><strong>：</strong></strong> 先生成一个</strong></em>*E</em>*</strong>表示该个条件式的属性，扫描bool表达式</p><p>，每当扫描到&gt;= = &lt;= &gt; &lt; 时<strong><strong>生成两个四元组</strong></strong>和一个<strong><strong>ei</strong></strong>，并调用Gramma_Expression()</p><p>,e和E的属性使用EState（struct）记录，ei与ej，E之间的关系如下：</p><ol><li> <strong><strong>当E -&gt; e1 时</strong></strong>，e1和E同true和false出口</li><li> <strong><strong>当E -&gt; e1 or e2 时</strong></strong>，e1.false = e2.pos , e1.true = e2.true = E.true, e2.false = E.false</li><li> <strong><strong>当E -&gt; e1 and e2 时</strong></strong>,e1.true = e2.pos , e1.false = e2.false = E.false, e2.true = E.true</li></ol><p>不同属性的EState真假出口的通过<strong><strong>链表拉链</strong></strong>的方式等待回填，函数结束时<strong><strong>返回E的地址</strong></strong>，留给if\while\repeat属性中的EState*记录</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">bool</span> <span class="hljs-type">IsCondition</span>(<span class="hljs-type">string</span> op) //是 <span class="hljs-type">bool</span> 符<br>&#123;<br><span class="hljs-keyword">return</span> (op == <span class="hljs-string">&quot;&lt;&quot;</span>) || (op == <span class="hljs-string">&quot;&lt;=&quot;</span>) || (op == <span class="hljs-string">&quot;=&quot;</span>) || (op == <span class="hljs-string">&quot;&gt;&quot;</span>) || (op == <span class="hljs-string">&quot;&gt;=&quot;</span>);<br>&#125;<br><span class="hljs-type">EState</span>&amp; sampleAnalyze::<span class="hljs-type">Gramma_Condition</span>()<br>&#123;<br>生成E<br><span class="hljs-keyword">while</span> (遍历<span class="hljs-type">bool</span>表达式)<br>&#123;<br><span class="hljs-keyword">if</span> (如果读取到了标识符/字符串/数字)<br>&#123;<br><span class="hljs-type">Gramma_Expression</span>(_temp_rp);<br>&#125;<br><span class="hljs-keyword">if</span> (op == <span class="hljs-string">&quot;&lt;&quot;</span>) || (op == <span class="hljs-string">&quot;&lt;=&quot;</span>) || (op == <span class="hljs-string">&quot;=&quot;</span>) || (op == <span class="hljs-string">&quot;&gt;&quot;</span>) || (op == <span class="hljs-string">&quot;&gt;=&quot;</span>) <br>&#123;<br><span class="hljs-type">Gramma_Expression</span>(_temp_rp + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(如果当前没有标记过的<span class="hljs-keyword">or</span>/<span class="hljs-keyword">and</span>)<br>&#123; <br>生成ei<br>生成四元式*<span class="hljs-number">2</span> <br>                  链表拉链ei与E的真假出口挂钩<br>&#125;<br><span class="hljs-keyword">else</span> <br>&#123;<br><span class="hljs-keyword">if</span> (存在标记过的<span class="hljs-keyword">or</span>)<br>&#123;<br>生成ei<br>    生成四元式*<span class="hljs-number">2</span> <br>                      链表拉链ei与ei-<span class="hljs-number">1</span>和E的真假出口挂钩<br>                      弹出该<span class="hljs-keyword">or</span>的位置<br>&#125;<br><span class="hljs-keyword">if</span> (存在标记过的<span class="hljs-keyword">and</span>)<br><span class="hljs-meta">&#123;...&#125;</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (如果读取到了<span class="hljs-keyword">and</span>)<br>&#123;<br>标记<span class="hljs-keyword">and</span>位置<br><span class="hljs-keyword">if</span>(orPoint + andPoint &gt; <span class="hljs-number">1</span>)<br>&#123;<br>抛出报错：多余的<span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span><br>&#125;<br>&#125;<br><span class="hljs-meta">&#123;...&#125;</span><br><span class="hljs-keyword">return</span> E的地址<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><strong>检查语义栈，回填E的出入口</strong>*****<em>Gramma_FrontQuaternions()*<em><strong><strong><strong>：</strong></strong>在</strong></em>*每次生成四元组前会调用一次</em>*</strong>，检查语义栈顶的动作词并执行相应动作：</p><p>While(语义栈不为空）{</p><ol><li> <strong><strong>栈顶为</strong></strong><strong><strong>“if”</strong>******:**</strong>(1)如果if.false未回填，回填if.false，否则（if.false已经被else回填情况下）回填已经标记好的if.true出口,continue</li></ol><p><strong><strong>2.栈顶为</strong></strong>****”<strong><strong><strong><strong>else</strong></strong></strong></strong>“********:****回填if.false，break</p><p>*<em><strong>3.<strong><strong><strong><strong>栈顶为</strong></strong></strong></strong>“<strong><strong><strong><strong>do</strong></strong></strong></strong>“</strong></em>*****:****回填while.true，break</p><p>*<em><strong>4.<strong><strong><strong><strong>栈顶为</strong></strong></strong></strong>“<strong><strong><strong><strong>then</strong></strong></strong></strong>“</strong></em>*****:****回填if.true，break</p><p>*<em><strong>5.<strong><strong><strong><strong>栈顶为</strong></strong></strong></strong>“<strong><strong><strong><strong>while</strong></strong></strong></strong>“</strong></em>*****:****生成四元组（j,-,-,while.enter）,然后再回填while.false,continue</p><p>*<em><strong>6.<strong><strong><strong><strong>栈顶为</strong></strong></strong></strong>“<strong><strong><strong><strong>repeat</strong></strong></strong></strong>“</strong></em>*****:****标记repeat入口,continue</p><p>}</p><p>如出现一些异常情况：如if.false已经回填了栈顶依然出现了‘else’，程序会抛出报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs awk">void sampleAnalyze::Gramma_FrontQuaternions()<br>&#123;<br><span class="hljs-keyword">while</span> (!StateStack.empty())<br>&#123;<br><span class="hljs-keyword">if</span> (StateStack.top() == <span class="hljs-string">&quot;if&quot;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (ifStack.top().E-&gt;_true != -<span class="hljs-number">1</span> &amp;&amp; ifStack.top().E-&gt;_false == -<span class="hljs-number">1</span>) <br><span class="hljs-regexp">//</span>true出口已回填，false出口未回填(无<span class="hljs-keyword">else</span>情况)<br>&#123;<br>ifStack.top().backpatch_F(_curr_index); <span class="hljs-regexp">//</span>回填false出口<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ifStack.top().E-&gt;_true == -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span>true出口未回填<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;语法分析错误：if缺少then&quot;</span>;<br>abort();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ifStack.top().E-&gt;_true != -<span class="hljs-number">1</span> &amp;&amp; ifStack.top().E-&gt;_false != -<span class="hljs-number">1</span>) <br><span class="hljs-regexp">//</span>true出口\false出口已回填(有<span class="hljs-keyword">else</span>情况)<br>&#123;<br>Quaternions[ifStack.top().pos_ElseQ].v4 = ToString(_curr_index); <br><span class="hljs-regexp">//</span>回填<span class="hljs-keyword">if</span>-<span class="hljs-keyword">exit</span>的出口<br>&#125;<br>ifStack.pop();<br>StateStack.pop();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (StateStack.top() == <span class="hljs-string">&quot;else&quot;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (ifStack.top().E-&gt;_true != -<span class="hljs-number">1</span> &amp;&amp; ifStack.top().E-&gt;_false == -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span>true出口已回填，false出口未回填<br>&#123;<br>ifStack.top().pos_ElseQ = _curr_index;<span class="hljs-regexp">//</span>标记<span class="hljs-keyword">if</span>-<span class="hljs-keyword">exit</span>的出口<br>Quaternions.push_back(Quaternion(_curr_index++,<span class="hljs-string">&quot;j&quot;</span>));<br>ifStack.top().backpatch_F(_curr_index); <span class="hljs-regexp">//</span>回填假出口<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ifStack.top().E-&gt;_true != -<span class="hljs-number">1</span> &amp;&amp; ifStack.top().E-&gt;_false != -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span>true出口已回填，false出口未回填<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;语法分析错误：出现了多余的else&quot;</span>;<br>abort();<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ifStack.top().E-&gt;_true == -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span>true出口未回填<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;语法分析错误：if缺少then&quot;</span>;<br>abort();<br>&#125;<br>StateStack.pop(); <span class="hljs-regexp">//</span>弹出then<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (StateStack.top() == <span class="hljs-string">&quot;then&quot;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (ifStack.top().E-&gt;_true != -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span>true出口已回填<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;语法分析错误：多余的then出现&quot;</span>;<br>abort();<br>&#125;<br><span class="hljs-keyword">if</span> (ifStack.top().E-&gt;_true == -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span>true出口未回填<br>&#123;<br>ifStack.top().backpatch_T(_curr_index); <span class="hljs-regexp">//</span>回填<span class="hljs-keyword">if</span>.true<br>&#125;<br>StateStack.pop();<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (StateStack.top() == <span class="hljs-string">&quot;while&quot;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (whileStack.top().E-&gt;_true == -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span><span class="hljs-keyword">while</span>.true出口未被回填<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;语法分析错误：while缺少do&quot;</span>;<br>abort();<br>&#125;<br><span class="hljs-regexp">//</span>产生新四元式(循环回调）<br>Quaternions.push_back(Quaternion(_curr_index++, <span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, ToString(whileStack.top().Enter)));<br>whileStack.top().backpatch_F(_curr_index);<span class="hljs-regexp">//</span>回填<span class="hljs-keyword">while</span>.false出口<br><br>whileStack.pop();<br>StateStack.pop();<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (StateStack.top() == <span class="hljs-string">&quot;do&quot;</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (whileStack.top().E-&gt;_true != -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span><span class="hljs-keyword">while</span>.true出口已被回填<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;语法分析错误：多余的do出现&quot;</span>;<br>abort();<br>&#125;<br><span class="hljs-regexp">//</span>回填<span class="hljs-keyword">while</span>.true出口<br>whileStack.top().backpatch_T(_curr_index);<br><br>StateStack.pop();<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-regexp">//</span>有需要回填的repeat出口(写在这里的目的是为了先把<span class="hljs-keyword">else</span>的四元式生成完)<br><span class="hljs-keyword">if</span> (!repeatState.empty() &amp;&amp; repeatState.top().Enter == -<span class="hljs-number">1</span>) <br>&#123;<br>repeatState.top().Enter = _curr_index;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在所有语法分析完成后，合并jump，调用****PrintQuatrenions()****输出所有四元式，程序结束</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">PrintQuatrenions</span>()<br>&#123;<br>for (int i = <span class="hljs-number">0</span>; i &lt; Quaternions.size(); <span class="hljs-selector-tag">i</span>++)<br>&#123;<br><span class="hljs-built_in">printf</span>(&quot;(%d) (%s,%s,%s,%s)\n&quot;, Quaternions<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.index</span>,<br>Quaternions<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.v1</span><span class="hljs-selector-class">.c_str</span>(),<br>Quaternions<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.v2</span><span class="hljs-selector-class">.c_str</span>(),<br>Quaternions<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.v3</span><span class="hljs-selector-class">.c_str</span>(),<br>Quaternions<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.v4</span><span class="hljs-selector-class">.c_str</span>());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Github源码"><a href="#Github源码" class="headerlink" title="Github源码"></a>Github源码</h1><p>对应的项目源码已贴，欢迎大家参考</p><p><a href="https://github.com/sugarzo/SampleCompilation" title="GitHub - sugarzo/SampleCompilation: 大二编译原理课设-Sample语言的词法/语法分析器（c++）">GitHub - sugarzo/SampleCompilation: 大二编译原理课设-Sample语言的词法/语法分析器（c++）</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构大作业DBLP科学文件管理系统 概述</title>
    <link href="/2022/05/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E4%BD%9C%E4%B8%9ADBLP%E7%A7%91%E5%AD%A6%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <url>/2022/05/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%A7%E4%BD%9C%E4%B8%9ADBLP%E7%A7%91%E5%AD%A6%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>新开这篇博客，一是为了分享和总结自己的平日所学，督促自己好好学习。<del>二是为了将来面试的时候也有东西可以吹。</del>博主目前南方某985，计科大二在读。第一篇内容就选取上个月刚做完的数据结构大作业分享。</p><p>选取的题目要求是这样的：</p><p><strong><strong>科学文献管理系统</strong></strong></p><p>科研工作者的日常工作离不开查阅科学文献，并对其中的信息进行分析、筛选、挖掘和管理。请你为科研工作者设计一个管理系统，提高科学文献的管理效率。</p><ol><li> <strong><strong>目标用户</strong></strong>：科研工作者。</li><li> <strong><strong>数据配置</strong></strong>：请通过以下方法下载数据文件dblp.xml.gz.</li></ol><p><a href="http://dblp.uni-trier.de/xml/dblp.xml.gz" title="http://dblp.uni-trier.de/xml/dblp.xml.gz">http://dblp.uni-trier.de/xml/dblp.xml.gz</a></p><p>将该数据文件解压后，其中包含一个dblp.xml文件。该文件由科学文献的记录序列组成，记录的格式如下所示：</p> <article mdate="2002-01-03" key="persons/Codd71a"><p><author>E. F. Codd</author></p><title>Further Normalization of the Data Base Relational Model.</title><p><journal>IBM Research Report, San Jose, California</journal></p><p><volume>RJ909</volume></p><p><month>August</month></p><p><year>1971</year></p><p><cdrom>ibmTR/rj909.pdf</cdrom></p><p><ee>db/labs/ibm/RJ909.html</ee></p></article><p>每个记录对应一篇文章，其中包含对作者，题名，发表杂志，卷号，出版时间等的详细说明。请基于该数据，设计能满足后述功能的文献管理系统。</p><p><strong><strong>注：1）dblp.xml的大小超过1G，所以不要直接点击打开该文件。需要通过命令行命令</strong><strong><strong><strong>’</strong></strong></strong><strong>more</strong>****<strong>’</strong></strong> <strong><strong>或者自行编程查看。</strong></strong></p><p><strong><strong>2） 编程过程中，不允许使用数据库系统。需要自己建立管理文献数据的数据结构。</strong></strong></p><p><strong><strong>功能要求</strong></strong>：</p><p>F1. 基本搜索功能。输入作者名，能展示该作者发表的所有论文信息。输入完整的论文的题目，能展示该论文的其他相关信息</p><p>F2. 相关搜索。输入作者名，能展示于该作者有合作关系的其他所以作者。</p><p>F3. 作者统计功能。输出写文章最多的前100名作者。</p><p>F4. 热点分析功能。分析每一年发表的文章中，题目所包含的单词中，出现频率排名前10的关键词。</p><p>F5. 部分匹配搜索功能。给定若干个关键字，能快速搜索到题目中包含该关键字的文章信息</p><p>F6. 聚团分析。作者之间的合作关系可以看成是一个图，每个作者对应一个顶点，任两个作者之间如果存在合作关系，则在两个顶点之间建立连边。这个图中的每一个完全子图我们称为一个聚团（所谓完全子图指的是该子图的任意顶点都和该子图的其他顶点有连边，完全子图的顶点个数称为该完全子图的阶数），请统计整个图中各阶完全子图的个数。</p><p>F7. 可视化显示。通过图形化界面，展示作者之间合作关系图及其相关文章信息。</p><pre><code class="hljs">    数据结构的评判点在于大数据下的程序运行效率。在寒假前选取这个题目时，对这个题目并太多的了解：一是想选题太简单的做起来就感觉很混，太难了自己又不会做，正好看到这个题目还自带数据库，好耶就选这个了~（后面开学了开始动工，修各种bug的时候就怀疑自己脑子进的水）~ 好在和另一位小组人员的努力下，还是成功做出来了。光代码行数也超过了4k行，过程中也学到了很多知识，算是课设中比较大的项目了</code></pre><p>运行截图：</p><p><img src="https://img-blog.csdnimg.cn/f387ff7208264b7ba747f70faa79be72.gif"></p><p><img src="https://img-blog.csdnimg.cn/82435d11afc649468be402d7df6942af.gif"></p><p><img src="https://img-blog.csdnimg.cn/1b7dc451a8734e108fb6230c9a1de3eb.png"></p><p><img src="https://img-blog.csdnimg.cn/5505c811c3fb4b709506c8c015ece9df.png"></p><p><img src="https://img-blog.csdnimg.cn/2ea848248a6d40ffa7798bd215e79bca.png"></p><pre><code class="hljs">    因为要开发可视化的图形界面。选择开发工具时就选择了用C++开发后端，C#/Unity前端（为什么不用QT统一用C++，因为不想学orz 平时打Gamejam用Unity拉UI更熟练，自己也更喜欢C#的码风）。框架跨语言时也涉及到DLL动态链接库的编写。最终总结其中出运用到的技术如下：</code></pre><p>C++/C#、Unity</p><p>文件哈希管理</p><p>哈希表与字典</p><p> 字典树</p><p>排序算法：桶排</p><p>Dll动态链接库编写与调用,数据交换</p><p>程序线程调度和管理</p><p>并查集 最大团分析</p><p>状态机设计模式</p><p>其中涉及到的一些设计点更新已完结<del>撒花</del>：</p><p><a href="https://blog.csdn.net/m0_51776409/article/details/124759116" title="数据结构大作业-DBLP科学文献管理系统（一） XML解析，文件哈希，C++线程_Sugarzo_mei的博客-CSDN博客">数据结构大作业-DBLP科学文献管理系统（一） XML解析，文件哈希，C++线程_Sugarzo_mei的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_51776409/article/details/124762788" title="数据结构大作业-DBLP科学文献管理系统（二）作者排序、热点分析功能，模糊搜索（桶排序，字典树）_Sugarzo_mei的博客-CSDN博客">数据结构大作业-DBLP科学文献管理系统（二）作者排序、热点分析功能，模糊搜索（桶排序，字典树）_Sugarzo_mei的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_51776409/article/details/124768630" title="数据结构大作业-DBLP科学文献管理系统（三）聚团分析（并查集，最大团问题）_Sugarzo_mei的博客-CSDN博客">数据结构大作业-DBLP科学文献管理系统（三）聚团分析（并查集，最大团问题）_Sugarzo_mei的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_51776409/article/details/124769268" title="数据结构大作业-DBLP科学文献管理系统（四） Dll编写，C++与C#的数据交换_Sugarzo_mei的博客-CSDN博客">数据结构大作业-DBLP科学文献管理系统（四） Dll编写，C++与C#的数据交换_Sugarzo_mei的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/m0_51776409/article/details/124783052" title="https://blog.csdn.net/m0_51776409/article/details/124783052">https://blog.csdn.net/m0_51776409/article/details/124783052</a></p><p>GIthub项目源码，包括了前端后端的全代码以及对应的unitypackage，可执行程序</p><p><a href="https://github.com/sugarzo/DataStructure" title="GitHub - sugarzo/DataStructure: 大二数据结构课设-科学文献管理系统dblp.xml解析">GitHub - sugarzo/DataStructure: 大二数据结构课设-科学文献管理系统dblp.xml解析</a></p><p>在做项目的过程中，看过另一位博主做的课设，从中得到了很多启发，不过他的原博客是在sina写的然而现在已经被维护了，所以网址打不开x。非常感谢这位博主，在这里也放出他的github源码可供参考：</p><p><a href="https://github.com/CMHowl/DBLPQuickBrowser/" title="GitHub - CMHowl/DBLPQuickBrowser: DBLP Management System / DBLP 科学文献管理系统">GitHub - CMHowl/DBLPQuickBrowser: DBLP Management System / DBLP 科学文献管理系统</a></p><p>本文转自 <a href="https://blog.csdn.net/m0_51776409/article/details/124747467?spm=1001.2014.3001.5501">https://blog.csdn.net/m0_51776409/article/details/124747467?spm=1001.2014.3001.5501</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>C#</tag>
      
      <tag>C++</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
